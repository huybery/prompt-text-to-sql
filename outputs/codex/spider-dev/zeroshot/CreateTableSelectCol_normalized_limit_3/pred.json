[
    {
        "db_id": "concert_singer",
        "question": "How many singers do we have?",
        "gold_sql": "SELECT count(*) FROM singer",
        "predicted_sql": "select count(*) from singer",
        "prompt_len": 615
    },
    {
        "db_id": "concert_singer",
        "question": "What is the total number of singers?",
        "gold_sql": "SELECT count(*) FROM singer",
        "predicted_sql": "select count(*) from singer",
        "prompt_len": 616
    },
    {
        "db_id": "concert_singer",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "gold_sql": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "predicted_sql": "select name, country, age from singer order by age desc",
        "prompt_len": 627
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "gold_sql": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "predicted_sql": "select name, country, age from singer order by age desc",
        "prompt_len": 626
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "gold_sql": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "predicted_sql": "select avg(age), min(age), max(age) from singer where country = \"France\"",
        "prompt_len": 624
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "gold_sql": "SELECT avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
        "predicted_sql": "select avg(age), min(age), max(age) from singer where country = \"France\"",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "gold_sql": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "predicted_sql": "select song_name, song_release_year from singer where age = (select min(age) from singer)",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "gold_sql": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "predicted_sql": "select song_name, song_release_year from singer where age = (select min(age) from singer)",
        "prompt_len": 624
    },
    {
        "db_id": "concert_singer",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "gold_sql": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "predicted_sql": "select distinct country from singer where age > 20",
        "prompt_len": 621
    },
    {
        "db_id": "concert_singer",
        "question": "What are  the different countries with singers above age 20?",
        "gold_sql": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "predicted_sql": "select distinct country from singer where age > 20",
        "prompt_len": 620
    },
    {
        "db_id": "concert_singer",
        "question": "Show all countries and the number of singers in each country.",
        "gold_sql": "SELECT country , count(*) FROM singer GROUP BY country",
        "predicted_sql": "select country, count(*) from singer group by country",
        "prompt_len": 620
    },
    {
        "db_id": "concert_singer",
        "question": "How many singers are from each country?",
        "gold_sql": "SELECT country , count(*) FROM singer GROUP BY country",
        "predicted_sql": "select country, count(*) from singer group by country",
        "prompt_len": 616
    },
    {
        "db_id": "concert_singer",
        "question": "List all song names by singers above the average age.",
        "gold_sql": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "predicted_sql": "select song_name from singer where age > (select avg(age) from singer)",
        "prompt_len": 619
    },
    {
        "db_id": "concert_singer",
        "question": "What are all the song names by singers who are older than average?",
        "gold_sql": "SELECT song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
        "predicted_sql": "select song_name from singer where age > (select avg(age) from singer)",
        "prompt_len": 622
    },
    {
        "db_id": "concert_singer",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "gold_sql": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "predicted_sql": "select location, name from stadium where capacity between 5000 and 10000",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "gold_sql": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "predicted_sql": "select location, name from stadium where capacity between 5000 and 10000",
        "prompt_len": 624
    },
    {
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "gold_sql": "select max(capacity), average from stadium",
        "predicted_sql": "select max(capacity), avg(capacity) from stadium",
        "prompt_len": 620
    },
    {
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "gold_sql": "select avg(capacity) , max(capacity) from stadium",
        "predicted_sql": "select avg(capacity), max(capacity) from stadium",
        "prompt_len": 619
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "gold_sql": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "predicted_sql": "select name, capacity from stadium where average = (select max(average) from stadium)",
        "prompt_len": 622
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "gold_sql": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "predicted_sql": "select name, capacity from stadium where average = (select max(average) from stadium)",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts are there in year 2014 or 2015?",
        "gold_sql": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "predicted_sql": "select count(*) from concert where year = 2014 or year = 2015",
        "prompt_len": 619
    },
    {
        "db_id": "concert_singer",
        "question": "How many concerts occurred in 2014 or 2015?",
        "gold_sql": "SELECT count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
        "predicted_sql": "select count(*) from concert where year = 2014 or year = 2015",
        "prompt_len": 617
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "gold_sql": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
        "predicted_sql": "select name, count(concert_id) from stadium join concert on stadium.stadium_id = concert.stadium_id group by name",
        "prompt_len": 621
    },
    {
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "gold_sql": "SELECT T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
        "predicted_sql": "select stadium.name, count(concert.concert_id) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.name",
        "prompt_len": 618
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "gold_sql": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name, capacity from stadium where stadium_id in (select stadium_id from concert where year >= 2014)",
        "prompt_len": 625
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "gold_sql": "select t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
        "predicted_sql": "select name, capacity from stadium where stadium_id in (select stadium_id from concert where year > 2013)",
        "prompt_len": 624
    },
    {
        "db_id": "concert_singer",
        "question": "Which year has most number of concerts?",
        "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select year, count(*) as number_of_concerts from concert group by year order by number_of_concerts desc limit 1",
        "prompt_len": 616
    },
    {
        "db_id": "concert_singer",
        "question": "What is the year that had the most concerts?",
        "gold_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select year, count(*) as count from concert group by year order by count desc limit 1",
        "prompt_len": 618
    },
    {
        "db_id": "concert_singer",
        "question": "Show the stadium names without any concert.",
        "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "predicted_sql": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "prompt_len": 616
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the stadiums without any concerts?",
        "gold_sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "predicted_sql": "select name from stadium where stadium_id not in (select stadium_id from concert)",
        "prompt_len": 619
    },
    {
        "db_id": "concert_singer",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "gold_sql": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "predicted_sql": "select distinct country from singer where age > 40 or age < 30",
        "prompt_len": 624
    },
    {
        "db_id": "concert_singer",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
        "predicted_sql": "select name from stadium where stadium_id not in (select stadium_id from concert where year = 2014)",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "gold_sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
        "predicted_sql": "select name from stadium where stadium_id not in (select stadium_id from concert where year = 2014)",
        "prompt_len": 624
    },
    {
        "db_id": "concert_singer",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "gold_sql": "SELECT T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
        "predicted_sql": "select concert_name, theme, count(singer_id) from concert, singer_in_concert where concert.concert_id = singer_in_concert.concert_id group by concert_name",
        "prompt_len": 625
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "gold_sql": "select t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
        "predicted_sql": "select concert_name, theme, count(singer_id) from concert, singer_in_concert where concert.concert_id = singer_in_concert.concert_id group by concert_name, theme",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "List singer names and number of concerts for each singer.",
        "gold_sql": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
        "predicted_sql": "select singer.name, count(singer_in_concert.concert_id) as number_of_concerts from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name",
        "prompt_len": 619
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?",
        "gold_sql": "SELECT T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
        "predicted_sql": "select singer.name, count(singer_in_concert.concert_id) as number_of_concerts from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "List all singer names in concerts in year 2014.",
        "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
        "predicted_sql": "select singer.name from singer, singer_in_concert, concert where singer.singer_id = singer_in_concert.singer_id and singer_in_concert.concert_id = concert.concert_id and concert.year = 2014",
        "prompt_len": 618
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "gold_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
        "predicted_sql": "select name from singer where singer_id in (select singer_id from singer_in_concert where concert_id in (select concert_id from concert where year = 2014))",
        "prompt_len": 623
    },
    {
        "db_id": "concert_singer",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "gold_sql": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "predicted_sql": "select name, country from singer where song_name like '%Hey%'",
        "prompt_len": 629
    },
    {
        "db_id": "concert_singer",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "gold_sql": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "predicted_sql": "select name, country from singer where song_name like '%Hey%'",
        "prompt_len": 633
    },
    {
        "db_id": "concert_singer",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "gold_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
        "predicted_sql": "select name, location from stadium where stadium_id in (select stadium_id from concert where year in ('2014','2015'))",
        "prompt_len": 629
    },
    {
        "db_id": "concert_singer",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "gold_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
        "predicted_sql": "select name, location from stadium where stadium_id in (select stadium_id from concert where year in ('2014', '2015') group by stadium_id having count(*) = 2)",
        "prompt_len": 628
    },
    {
        "db_id": "concert_singer",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "predicted_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium where capacity = (select max(capacity) from stadium))",
        "prompt_len": 622
    },
    {
        "db_id": "concert_singer",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "gold_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "predicted_sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium where capacity = (select max(capacity) from stadium))",
        "prompt_len": 624
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "gold_sql": "SELECT count(*) FROM pets WHERE weight > 10",
        "predicted_sql": "select count(*) from pets where weight > 10",
        "prompt_len": 395
    },
    {
        "db_id": "pets_1",
        "question": "How many pets have a greater weight than 10?",
        "gold_sql": "SELECT count(*) FROM pets WHERE weight > 10",
        "predicted_sql": "select count(*) from pets where weight > 10",
        "prompt_len": 393
    },
    {
        "db_id": "pets_1",
        "question": "Find the weight of the youngest dog.",
        "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "predicted_sql": "select weight from pets where pettype = \"dog\" and pet_age = (select min(pet_age) from pets where pettype = \"dog\")",
        "prompt_len": 391
    },
    {
        "db_id": "pets_1",
        "question": "How much does the youngest dog weigh?",
        "gold_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "predicted_sql": "select weight from pets where pettype = \"dog\" and pet_age = (select min(pet_age) from pets where pettype = \"dog\")",
        "prompt_len": 391
    },
    {
        "db_id": "pets_1",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "gold_sql": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "predicted_sql": "select pettype, max(weight) from pets group by pettype",
        "prompt_len": 401
    },
    {
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet.",
        "gold_sql": "SELECT max(weight) , petType FROM pets GROUP BY petType",
        "predicted_sql": "select pettype, max(weight) from pets group by pettype",
        "prompt_len": 395
    },
    {
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20.",
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
        "predicted_sql": "select count(*) from student, pets, has_pet where student.stuid = has_pet.stuid and pets.petid = has_pet.petid and student.age > 20",
        "prompt_len": 396
    },
    {
        "db_id": "pets_1",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
        "predicted_sql": "select count(*) from pets, student, has_pet where student.age > 20 and student.stuid = has_pet.stuid and has_pet.petid = pets.petid",
        "prompt_len": 398
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "predicted_sql": "select count(*) from pets, student, has_pet where pets.petid = has_pet.petid and student.stuid = has_pet.stuid and pets.pettype = \"dog\" and student.sex = \"F\"",
        "prompt_len": 400
    },
    {
        "db_id": "pets_1",
        "question": "How many dog pets are raised by female students?",
        "gold_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "predicted_sql": "select count(*) from pets, student, has_pet where pets.petid = has_pet.petid and student.stuid = has_pet.stuid and pets.pettype = \"dog\" and student.sex = \"F\"",
        "prompt_len": 393
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of distinct type of pets.",
        "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "predicted_sql": "select count(distinct pettype) from pets",
        "prompt_len": 392
    },
    {
        "db_id": "pets_1",
        "question": "How many different types of pet are there?",
        "gold_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "predicted_sql": "select count(distinct pettype) from pets",
        "prompt_len": 392
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name of students who have cat or dog pet.",
        "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
        "predicted_sql": "select fname from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\" or pettype = \"dog\"))",
        "prompt_len": 396
    },
    {
        "db_id": "pets_1",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "gold_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
        "predicted_sql": "select fname from student, pets, has_pet where student.stuid = has_pet.stuid and pets.petid = has_pet.petid and (pettype = \"cat\" or pettype = \"dog\")",
        "prompt_len": 401
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name of students who have both cat and dog pets .",
        "gold_sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
        "predicted_sql": "select fname from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\") intersect select stuid from has_pet where petid in (select petid from pets where pettype = \"dog\"))",
        "prompt_len": 397
    },
    {
        "db_id": "pets_1",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "gold_sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
        "predicted_sql": "select fname from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\") intersect select stuid from has_pet where petid in (select petid from pets where pettype = \"dog\"))",
        "prompt_len": 399
    },
    {
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet.",
        "gold_sql": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "predicted_sql": "select major, age from student where stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'cat'))",
        "prompt_len": 398
    },
    {
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "gold_sql": "SELECT major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "predicted_sql": "select major, age from student where stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\"))",
        "prompt_len": 405
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet.",
        "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
        "predicted_sql": "select stuid from student where stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'cat'))",
        "prompt_len": 396
    },
    {
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?",
        "gold_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
        "predicted_sql": "select stuid from student where stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'cat'))",
        "prompt_len": 399
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "gold_sql": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "predicted_sql": "select fname, age from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"dog\") and stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\")))",
        "prompt_len": 405
    },
    {
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "gold_sql": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
        "predicted_sql": "select fname from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"dog\") and stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\")))",
        "prompt_len": 402
    },
    {
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet.",
        "gold_sql": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "predicted_sql": "select pettype, weight from pets where pet_age = (select min(pet_age) from pets)",
        "prompt_len": 393
    },
    {
        "db_id": "pets_1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "gold_sql": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "predicted_sql": "select pettype, weight from pets where pet_age = (select min(pet_age) from pets)",
        "prompt_len": 399
    },
    {
        "db_id": "pets_1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "gold_sql": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "predicted_sql": "select petid, weight from pets where pet_age > 1",
        "prompt_len": 398
    },
    {
        "db_id": "pets_1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "gold_sql": "SELECT petid , weight FROM pets WHERE pet_age > 1",
        "predicted_sql": "select petid, weight from pets where pet_age > 1",
        "prompt_len": 398
    },
    {
        "db_id": "pets_1",
        "question": "Find the average and maximum age for each type of pet.",
        "gold_sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "predicted_sql": "select pettype, avg(pet_age), max(pet_age) from pets group by pettype",
        "prompt_len": 395
    },
    {
        "db_id": "pets_1",
        "question": "What is the average and maximum age for each pet type?",
        "gold_sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
        "predicted_sql": "select pettype, avg(pet_age), max(pet_age) from pets group by pettype",
        "prompt_len": 395
    },
    {
        "db_id": "pets_1",
        "question": "Find the average weight for each pet type.",
        "gold_sql": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "predicted_sql": "select pettype, avg(weight) from pets group by pettype",
        "prompt_len": 392
    },
    {
        "db_id": "pets_1",
        "question": "What is the average weight for each type of pet?",
        "gold_sql": "SELECT avg(weight) , pettype FROM pets GROUP BY pettype",
        "predicted_sql": "select pettype, avg(weight) from pets group by pettype",
        "prompt_len": 394
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a pet.",
        "gold_sql": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "predicted_sql": "select fname, age from student where stuid in (select stuid from has_pet)",
        "prompt_len": 396
    },
    {
        "db_id": "pets_1",
        "question": "What are the different first names and ages of the students who do have pets?",
        "gold_sql": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "predicted_sql": "select fname, age from student where stuid in (select stuid from has_pet)",
        "prompt_len": 399
    },
    {
        "db_id": "pets_1",
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
        "predicted_sql": "select petid from has_pet where stuid in (select stuid from student where lname = 'Smith')",
        "prompt_len": 402
    },
    {
        "db_id": "pets_1",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "gold_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
        "predicted_sql": "select petid from has_pet where stuid in (select stuid from student where lname = 'Smith')",
        "prompt_len": 401
    },
    {
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "gold_sql": "SELECT count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
        "predicted_sql": "select stuid, count(petid) from has_pet group by stuid",
        "prompt_len": 399
    },
    {
        "db_id": "pets_1",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "gold_sql": "select count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "predicted_sql": "select stuid, count(petid) from has_pet group by stuid",
        "prompt_len": 405
    },
    {
        "db_id": "pets_1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "gold_sql": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "predicted_sql": "select fname, sex from student where stuid in (select stuid from has_pet group by stuid having count(*) > 1)",
        "prompt_len": 398
    },
    {
        "db_id": "pets_1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "gold_sql": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
        "predicted_sql": "select fname, sex from student where stuid in (select stuid from has_pet group by stuid having count(*) > 1)",
        "prompt_len": 402
    },
    {
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
        "predicted_sql": "select lname from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\" and pet_age = 3))",
        "prompt_len": 399
    },
    {
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "gold_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
        "predicted_sql": "select lname from student where stuid in (select stuid from has_pet where petid in (select petid from pets where pettype = \"cat\" and pet_age = 3))",
        "prompt_len": 401
    },
    {
        "db_id": "pets_1",
        "question": "Find the average age of students who do not have any pet .",
        "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "predicted_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "prompt_len": 396
    },
    {
        "db_id": "pets_1",
        "question": "What is the average age for all students who do not own any pets ?",
        "gold_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "predicted_sql": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "prompt_len": 398
    },
    {
        "db_id": "car_1",
        "question": "How many continents are there?",
        "gold_sql": "SELECT count(*) FROM CONTINENTS",
        "predicted_sql": "select count(*) from continents",
        "prompt_len": 666
    },
    {
        "db_id": "car_1",
        "question": "What is the number of continents?",
        "gold_sql": "SELECT count(*) FROM CONTINENTS",
        "predicted_sql": "select count(*) from continents",
        "prompt_len": 667
    },
    {
        "db_id": "car_1",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "gold_sql": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
        "predicted_sql": "select contid, continent, count(countryid) as num_countries from continents join countries on continents.contid = countries.continent group by contid",
        "prompt_len": 681
    },
    {
        "db_id": "car_1",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "gold_sql": "SELECT T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
        "predicted_sql": "select continents.contid, continents.continent, count(countries.countryid) as country_count from continents join countries on continents.contid = countries.continent group by continents.contid",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "How many countries are listed?",
        "gold_sql": "SELECT count(*) FROM COUNTRIES",
        "predicted_sql": "select count(*) from countries",
        "prompt_len": 666
    },
    {
        "db_id": "car_1",
        "question": "How many countries exist?",
        "gold_sql": "SELECT count(*) FROM COUNTRIES",
        "predicted_sql": "select count(*) from countries",
        "prompt_len": 665
    },
    {
        "db_id": "car_1",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "gold_sql": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        "predicted_sql": "select fullname, id, count(model) as number_of_models from car_makers join model_list on car_makers.id = model_list.maker group by fullname, id",
        "prompt_len": 679
    },
    {
        "db_id": "car_1",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "gold_sql": "SELECT T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
        "predicted_sql": "select car_makers.id, car_makers.fullname, count(model_list.model) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
        "prompt_len": 681
    },
    {
        "db_id": "car_1",
        "question": "Which model of the car has the minimum horsepower?",
        "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
        "predicted_sql": "select model from model_list where modelid = (select id from car_names where horsepower = (select min(horsepower) from cars_data))",
        "prompt_len": 670
    },
    {
        "db_id": "car_1",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
        "predicted_sql": "select model from model_list where modelid = (select model from car_names where makeid = (select id from cars_data where horsepower = (select min(horsepower) from cars_data)))",
        "prompt_len": 674
    },
    {
        "db_id": "car_1",
        "question": "Find the model of the car whose weight is below the average weight.",
        "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from cars_data where weight < (select avg(weight) from cars_data)))",
        "prompt_len": 674
    },
    {
        "db_id": "car_1",
        "question": "What is the model for the car with a weight smaller than the average?",
        "gold_sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from cars_data where weight < (select avg(weight) from cars_data)))",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
        "predicted_sql": "select maker from car_makers where id in (select maker from model_list where modelid in (select id from car_names where makeid in (select id from cars_data where year = 1970)))",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "gold_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
        "predicted_sql": "select distinct car_makers.fullname from car_makers join car_names on car_names.model = car_makers.maker join cars_data on cars_data.id = car_names.makeid where cars_data.year = 1970",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "gold_sql": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA)",
        "predicted_sql": "select make, year from cars_data join car_names on cars_data.id = car_names.makeid where year = (select min(year) from cars_data)",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "gold_sql": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA)",
        "predicted_sql": "select make, year from cars_data join car_names on cars_data.id = car_names.makeid where year = (select min(year) from cars_data)",
        "prompt_len": 679
    },
    {
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?",
        "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
        "predicted_sql": "select distinct model from model_list join cars_data on model_list.model = cars_data.id where year > 1980",
        "prompt_len": 670
    },
    {
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?",
        "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from cars_data where year > 1980))",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "gold_sql": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "predicted_sql": "select continents.continent, count(car_makers.id) as count from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country group by continents.continent",
        "prompt_len": 678
    },
    {
        "db_id": "car_1",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "gold_sql": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "predicted_sql": "select continents.continent, count(car_makers.id) as car_makers_count from continents left join countries on continents.contid = countries.continent left join car_makers on countries.countryid = car_makers.country group by continents.continent",
        "prompt_len": 678
    },
    {
        "db_id": "car_1",
        "question": "Which of the countries has the most car makers? List the country name.",
        "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1",
        "predicted_sql": "select countryname from countries where countryid in (select country from car_makers group by country order by count(*) desc limit 1)",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "What is the name of the country with the most car makers?",
        "gold_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1",
        "predicted_sql": "select countryname from countries where countryid = (select country from car_makers group by country order by count(*) desc limit 1)",
        "prompt_len": 673
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "gold_sql": "select count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id",
        "predicted_sql": "select count(model_list.modelid), car_makers.fullname from model_list join car_makers on model_list.maker = car_makers.id group by car_makers.fullname",
        "prompt_len": 680
    },
    {
        "db_id": "car_1",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "gold_sql": "SELECT Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
        "predicted_sql": "select car_makers.id, car_makers.fullname, count(model_list.model) as model_count from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id",
        "prompt_len": 685
    },
    {
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'",
        "predicted_sql": "select accelerate from cars_data where id = (select makeid from car_names where make = \"amc hornet sportabout (sw)\")",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "gold_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'",
        "predicted_sql": "select accelerate from cars_data where id = (select makeid from car_names where make = \"amc hornet sportabout (sw)\")",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "How many car makers are there in france?",
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
        "predicted_sql": "select count(*) from car_makers where country = (select countryid from countries where countryname = \"france\")",
        "prompt_len": 670
    },
    {
        "db_id": "car_1",
        "question": "What is the number of makers of care in France?",
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
        "predicted_sql": "select count(*) from car_makers where country = (select countryid from countries where countryname = \"france\")",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?",
        "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
        "predicted_sql": "select count(*) from car_makers where country = (select countryid from countries where countryname = \"usa\")",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?",
        "gold_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
        "predicted_sql": "select count(model) from model_list where maker in (select id from car_makers where country in (select countryid from countries where countryname = \"usa\"))",
        "prompt_len": 674
    },
    {
        "db_id": "car_1",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4",
        "predicted_sql": "select avg(mpg) from cars_data where cylinders = 4",
        "prompt_len": 678
    },
    {
        "db_id": "car_1",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "gold_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders = 4",
        "predicted_sql": "select avg(mpg) from cars_data where cylinders = 4",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "gold_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "predicted_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "gold_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "predicted_sql": "select min(weight) from cars_data where cylinders = 8 and year = 1974",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "What are all the makers and models?",
        "gold_sql": "SELECT Maker , Model FROM MODEL_LIST",
        "predicted_sql": "select maker, model from car_makers join model_list on car_makers.id = model_list.maker",
        "prompt_len": 668
    },
    {
        "db_id": "car_1",
        "question": "What are the makers and models?",
        "gold_sql": "SELECT Maker , Model FROM MODEL_LIST",
        "predicted_sql": "select maker, model from car_makers join model_list on car_makers.id = model_list.maker",
        "prompt_len": 667
    },
    {
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id.",
        "gold_sql": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1",
        "predicted_sql": "select countryname, countryid from countries where countryid in (select country from car_makers)",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "gold_sql": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1",
        "predicted_sql": "select countryname, countryid from countries where countryid in (select country from car_makers)",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "What is the number of the cars with horsepower more than 150?",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150",
        "predicted_sql": "select count(*) from cars_data where horsepower > 150",
        "prompt_len": 673
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower > 150",
        "predicted_sql": "select count(*) from cars_data where horsepower > 150",
        "prompt_len": 673
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight of cars each year?",
        "gold_sql": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR",
        "predicted_sql": "select year, avg(weight) from cars_data group by year",
        "prompt_len": 670
    },
    {
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?",
        "gold_sql": "SELECT avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR",
        "predicted_sql": "select year, avg(weight), avg(year) from cars_data group by year",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3",
        "predicted_sql": "select countryname from countries where continent = 2 and countryid in (select country from car_makers group by country having count(*) >= 3)",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "gold_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3",
        "predicted_sql": "select distinct countryname from countries where continent = 2 and countryid in (select country from car_makers group by country having count(*) >= 3)",
        "prompt_len": 674
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "gold_sql": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
        "predicted_sql": "select horsepower, make from cars_data, car_names where cars_data.id = car_names.makeid and cylinders = 3",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "gold_sql": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
        "predicted_sql": "select make from car_names where model in (select model from model_list where maker in (select id from car_makers where country in (select countryid from countries where continent in (select contid from continents where continent = \"america\")))) and makeid in (select id from cars_data where cylinders = 3 and horsepower = (select max(horsepower) from cars_data where cylinders = 3))",
        "prompt_len": 679
    },
    {
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1",
        "predicted_sql": "select model from model_list where modelid = (select model from car_names where makeid = (select id from cars_data where mpg = (select max(mpg) from cars_data)))",
        "prompt_len": 679
    },
    {
        "db_id": "car_1",
        "question": "What is the car model with the highest mpg ?",
        "gold_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from cars_data where mpg = (select max(mpg) from cars_data)))",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "What is the average horsepower of the cars before 1980?",
        "gold_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980",
        "predicted_sql": "select avg(horsepower) from cars_data where year < 1980",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "gold_sql": "select avg(horsepower) from cars_data where year < 1980",
        "predicted_sql": "select avg(horsepower) from cars_data where year < 1980",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "What is the average edispl of the cars of model volvo?",
        "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
        "predicted_sql": "select avg(edispl) from cars_data where id in (select makeid from car_names where model = \"volvo\")",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "What is the average edispl for all volvos?",
        "gold_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
        "predicted_sql": "select avg(edispl) from cars_data where id in (select makeid from car_names where model in (select model from model_list where maker in (select id from car_makers where maker = \"volvo\")))",
        "prompt_len": 673
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "gold_sql": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "predicted_sql": "select cylinders, max(accelerate) from cars_data group by cylinders",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "gold_sql": "SELECT max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
        "predicted_sql": "select max(accelerate) from cars_data where cylinders = 4",
        "prompt_len": 671
    },
    {
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?",
        "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select model, count(make) as count from car_names group by model order by count desc limit 1",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "What model has the most different versions?",
        "gold_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select model, count(*) as count from model_list group by model order by count desc limit 1",
        "prompt_len": 668
    },
    {
        "db_id": "car_1",
        "question": "How many cars have more than 4 cylinders?",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4",
        "predicted_sql": "select count(*) from cars_data where cylinders > 4",
        "prompt_len": 669
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with more than 4 cylinders?",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4",
        "predicted_sql": "select count(*) from cars_data where cylinders > 4",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "how many cars were produced in 1980?",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980",
        "predicted_sql": "select count(*) from cars_data where year = 1980",
        "prompt_len": 668
    },
    {
        "db_id": "car_1",
        "question": "In 1980, how many cars were made?",
        "gold_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR = 1980",
        "predicted_sql": "select count(*) from cars_data where year = 1980",
        "prompt_len": 669
    },
    {
        "db_id": "car_1",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
        "predicted_sql": "select count(model) from model_list where maker = (select id from car_makers where fullname = \"American Motor Company\")",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "gold_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
        "predicted_sql": "select count(model) from model_list where maker = (select id from car_makers where maker = \"amc\")",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "gold_sql": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3",
        "predicted_sql": "select fullname, id from car_makers where id in (select maker from model_list group by maker having count(model) > 3)",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "gold_sql": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3",
        "predicted_sql": "select car_makers.maker, car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.maker having count(model_list.model) > 3",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
        "predicted_sql": "select model from model_list where maker in (select id from car_makers where fullname = \"General Motors\" or weight > 3500)",
        "prompt_len": 680
    },
    {
        "db_id": "car_1",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "gold_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
        "predicted_sql": "select model from model_list where maker in (select id from car_makers where maker in (\"gm\", \"general motors\")) and model in (select model from car_names where make in (select make from cars_data where weight > 3500))",
        "prompt_len": 680
    },
    {
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000",
        "predicted_sql": "select year from cars_data where weight between 3000 and 4000",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "gold_sql": "select distinct year from cars_data where weight between 3000 and 4000",
        "predicted_sql": "select distinct year from cars_data where weight < 4000 and weight > 3000",
        "prompt_len": 685
    },
    {
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "predicted_sql": "select horsepower from cars_data where accelerate = (select max(accelerate) from cars_data)",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "gold_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
        "predicted_sql": "select horsepower from cars_data where accelerate = (select max(accelerate) from cars_data)",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "predicted_sql": "select cylinders from cars_data where id in (select makeid from car_names where model = 'volvo' order by accelerate asc limit 1)",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "gold_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
        "predicted_sql": "select cylinders from cars_data where id in (select id from car_names where model in (select model from model_list where maker in (select id from car_makers where maker = \"volvo\")) order by accelerate asc limit 1)",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
        "predicted_sql": "select count(*) from cars_data where accelerate > (select max(horsepower) from cars_data)",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )",
        "predicted_sql": "select count(*) from cars_data where accelerate > (select max(horsepower) from cars_data)",
        "prompt_len": 678
    },
    {
        "db_id": "car_1",
        "question": "How many countries has more than 2 car makers ?",
        "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
        "predicted_sql": "select count(*) from countries where countryid in (select country from car_makers group by country having count(*) > 2)",
        "prompt_len": 670
    },
    {
        "db_id": "car_1",
        "question": "What is the number of countries with more than 2 car makers ?",
        "gold_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
        "predicted_sql": "select count(*) from countries where countryid in (select country from car_makers group by country having count(*) > 2)",
        "prompt_len": 673
    },
    {
        "db_id": "car_1",
        "question": "How many cars has over 6 cylinders?",
        "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6",
        "predicted_sql": "select count(*) from cars_data where cylinders > 6",
        "prompt_len": 668
    },
    {
        "db_id": "car_1",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "gold_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6",
        "predicted_sql": "select count(*) from cars_data where cylinders > 6",
        "prompt_len": 673
    },
    {
        "db_id": "car_1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from cars_data where cylinders = 4 and horsepower = (select max(horsepower) from cars_data where cylinders = 4)))",
        "prompt_len": 674
    },
    {
        "db_id": "car_1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "gold_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from cars_data where cylinders = 4 order by horsepower desc limit 1))",
        "prompt_len": 675
    },
    {
        "db_id": "car_1",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "gold_sql": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3",
        "predicted_sql": "select makeid, make from car_names where makeid in (select id from cars_data where horsepower > (select min(horsepower) from cars_data) and cylinders <= 3)",
        "prompt_len": 688
    },
    {
        "db_id": "car_1",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "gold_sql": "select t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4",
        "predicted_sql": "select makeid, make from car_names where makeid in (select id from cars_data where horsepower < (select min(horsepower) from cars_data) and cylinders < 4)",
        "prompt_len": 688
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "gold_sql": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "predicted_sql": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "prompt_len": 678
    },
    {
        "db_id": "car_1",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "gold_sql": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "predicted_sql": "select max(mpg) from cars_data where cylinders = 8 or year < 1980",
        "prompt_len": 680
    },
    {
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
        "predicted_sql": "select model from model_list where modelid in (select model from car_names where makeid in (select id from car_makers where maker != 'ford' and id in (select id from cars_data where weight < 3500)))",
        "prompt_len": 677
    },
    {
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "gold_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
        "predicted_sql": "select model from model_list where model not in (select model from car_names where make like '%ford%') and model in (select model from car_names where makeid in (select id from cars_data where weight < 3500))",
        "prompt_len": 682
    },
    {
        "db_id": "car_1",
        "question": "What are the name of the countries where there is not a single car maker?",
        "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
        "predicted_sql": "select countryname from countries where countryid not in (select country from car_makers)",
        "prompt_len": 676
    },
    {
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?",
        "gold_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
        "predicted_sql": "select countryname from countries where countryid not in (select country from car_makers)",
        "prompt_len": 672
    },
    {
        "db_id": "car_1",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "gold_sql": "select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3",
        "predicted_sql": "select id, maker from car_makers where id in (select maker from model_list group by maker having count(*) >= 2) and id in (select id from car_makers group by id having count(*) > 3)",
        "prompt_len": 685
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "gold_sql": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3",
        "predicted_sql": "select car_makers.id, car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model group by car_makers.id having count(model_list.model) >= 2 and count(car_names.make) > 3",
        "prompt_len": 684
    },
    {
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "gold_sql": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
        "predicted_sql": "select countries.countryid, countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where car_makers.id > 3 or model_list.model = 'fiat'",
        "prompt_len": 685
    },
    {
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "gold_sql": "select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat'",
        "predicted_sql": "select countries.countryid, countries.countryname from countries join car_makers on countries.countryid = car_makers.country join model_list on car_makers.id = model_list.maker where model_list.model = 'fiat' or car_makers.id > 3",
        "prompt_len": 683
    },
    {
        "db_id": "flight_2",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "predicted_sql": "select country from airlines where airline = \"JetBlue Airways\"",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "What country is Jetblue Airways affiliated with?",
        "gold_sql": "SELECT Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "predicted_sql": "select country from airlines where airline = \"Jetblue Airways\"",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "predicted_sql": "select abbreviation from airlines where airline = \"JetBlue Airways\"",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "gold_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
        "predicted_sql": "select abbreviation from airlines where airline = \"Jetblue Airways\"",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "gold_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "predicted_sql": "select airline, abbreviation from airlines where country = \"USA\"",
        "prompt_len": 391
    },
    {
        "db_id": "flight_2",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "gold_sql": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
        "predicted_sql": "select airline, abbreviation from airlines where country = \"USA\"",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "List the airport code and name in the city of Anthony.",
        "gold_sql": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
        "predicted_sql": "select airportcode, airportname from airports where city = \"Anthony\"",
        "prompt_len": 391
    },
    {
        "db_id": "flight_2",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "gold_sql": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
        "predicted_sql": "select airportcode, airportname from airports where city = \"Anthony\"",
        "prompt_len": 394
    },
    {
        "db_id": "flight_2",
        "question": "How many airlines do we have?",
        "gold_sql": "SELECT count(*) FROM AIRLINES",
        "predicted_sql": "select count(*) from airlines",
        "prompt_len": 386
    },
    {
        "db_id": "flight_2",
        "question": "What is the total number of airlines?",
        "gold_sql": "SELECT count(*) FROM AIRLINES",
        "predicted_sql": "select count(*) from airlines",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "How many airports do we have?",
        "gold_sql": "SELECT count(*) FROM AIRPORTS",
        "predicted_sql": "select count(*) from airports",
        "prompt_len": 386
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of  airports.",
        "gold_sql": "SELECT count(*) FROM AIRPORTS",
        "predicted_sql": "select count(*) from airports",
        "prompt_len": 386
    },
    {
        "db_id": "flight_2",
        "question": "How many flights do we have?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS",
        "predicted_sql": "select count(*) from flights",
        "prompt_len": 386
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS",
        "predicted_sql": "select count(*) from flights",
        "prompt_len": 385
    },
    {
        "db_id": "flight_2",
        "question": "Which airline has abbreviation 'UAL'?",
        "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "predicted_sql": "select airline from airlines where abbreviation = 'UAL'",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "Give the airline with abbreviation 'UAL'.",
        "gold_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
        "predicted_sql": "select airline from airlines where abbreviation = 'UAL'",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many airlines are from USA?",
        "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
        "predicted_sql": "select count(*) from airlines where country = \"USA\"",
        "prompt_len": 386
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of airlines in the USA.",
        "gold_sql": "SELECT count(*) FROM AIRLINES WHERE Country = \"USA\"",
        "predicted_sql": "select count(*) from airlines where country = \"USA\"",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "Which city and country is the Alton airport at?",
        "gold_sql": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
        "predicted_sql": "select city, country from airports where airportcode = 'ALN'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "Give the city and country for the Alton airport.",
        "gold_sql": "SELECT City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
        "predicted_sql": "select city, country from airports where airportcode = 'ALN'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport name for airport 'AKO'?",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
        "predicted_sql": "select airportname from airports where airportcode = 'AKO'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "Return the name of the airport with code 'AKO'.",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
        "predicted_sql": "select airportname from airports where airportcode = 'AKO'",
        "prompt_len": 391
    },
    {
        "db_id": "flight_2",
        "question": "What are airport names at City 'Aberdeen'?",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "predicted_sql": "select airportname from airports where city = 'Aberdeen'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "What are the names of airports in Aberdeen?",
        "gold_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "predicted_sql": "select airportname from airports where city = \"Aberdeen\"",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from 'APG'?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "predicted_sql": "select count(*) from flights where sourceairport = 'APG'",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of flights departing from 'APG'.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "predicted_sql": "select count(*) from flights where sourceairport = 'APG'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "How many flights have destination ATO?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
        "predicted_sql": "select count(*) from flights where destairport = 'ATO'",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of flights into ATO.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
        "predicted_sql": "select count(*) from flights where destairport = 'ATO'",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from City Aberdeen?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select count(*) from flights where sourceairport in (select airportcode from airports where city = \"Aberdeen\")",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights departing from Aberdeen.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select count(*) from flights where sourceairport = 'ABR'",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many flights arriving in Aberdeen city?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select count(*) from flights where destairport in (select airportcode from airports where city = \"Aberdeen\")",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of flights arriving in Aberdeen.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select count(*) from flights where destairport = 'ABZ'",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
        "predicted_sql": "select count(*) from flights where sourceairport = (select airportcode from airports where city = 'Aberdeen') and destairport = (select airportcode from airports where city = 'Ashley')",
        "prompt_len": 398
    },
    {
        "db_id": "flight_2",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
        "predicted_sql": "select count(*) from flights where sourceairport = \"ABR\" and destairport = \"ASY\"",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "predicted_sql": "select count(*) from flights where airline = (select uid from airlines where airline = 'JetBlue Airways')",
        "prompt_len": 391
    },
    {
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "predicted_sql": "select count(*) from flights where airline = 3",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
        "predicted_sql": "select count(*) from flights where airline = 1 and destairport = 'ASY'",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
        "predicted_sql": "select count(*) from flights where airline = 1 and destairport = 'ASY'",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
        "predicted_sql": "select count(*) from flights, airlines where flights.airline = airlines.uid and airline = 'United Airlines' and sourceairport = 'AHD'",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "gold_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
        "predicted_sql": "select count(*) from flights where airline = 1 and sourceairport = 'AHD'",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
        "predicted_sql": "select count(*) from flights, airlines, airports where flights.airline = airlines.uid and flights.destairport = airports.airportcode and airlines.airline = 'United Airlines' and airports.city = 'Aberdeen'",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "gold_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
        "predicted_sql": "select count(*) from flights, airlines, airports where flights.airline = airlines.uid and flights.destairport = airports.airportcode and airlines.airline = \"United Airlines\" and airports.city = \"Aberdeen\"",
        "prompt_len": 391
    },
    {
        "db_id": "flight_2",
        "question": "Which city has most number of arriving flights?",
        "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select city, count(*) as count from airports join flights on airports.airportcode = flights.destairport group by city order by count desc limit 1",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?",
        "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select city, count(*) as count from airports join flights on airports.airportcode = flights.destairport group by city order by count desc limit 1",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "Which city has most number of departing flights?",
        "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select city, count(*) as count from airports join flights on airports.airportcode = flights.sourceairport group by city order by count desc limit 1",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?",
        "gold_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select city from airports where airportcode in (select sourceairport from flights group by sourceairport order by count(*) desc limit 1)",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "What is the code of airport that has the highest number of flights?",
        "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select destairport from flights group by destairport order by count(*) desc limit 1",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "What is the airport code of the airport with the most flights?",
        "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select airportcode from airports where airportcode in (select sourceairport from flights group by sourceairport order by count(*) desc limit 1)",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "What is the code of airport that has fewest number of flights?",
        "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "predicted_sql": "select airportcode from airports where airportcode not in (select sourceairport from flights) and airportcode not in (select destairport from flights)",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "Give the code of the airport with the least flights.",
        "gold_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "predicted_sql": "select airportcode from airports where airportcode not in (select destairport from flights) and airportcode not in (select sourceairport from flights)",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "Which airline has most number of flights?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select airline, count(*) as num_flights from flights group by airline order by num_flights desc limit 1",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "What airline serves the most flights?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select airline, count(*) as num_flights from flights group by airline order by num_flights desc limit 1",
        "prompt_len": 386
    },
    {
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "gold_sql": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "predicted_sql": "select abbreviation, country from airlines where uid = (select airline from flights group by airline order by count(*) limit 1)",
        "prompt_len": 396
    },
    {
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "gold_sql": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "predicted_sql": "select abbreviation, country from airlines where uid = (select airline from flights group by airline order by count(*) limit 1)",
        "prompt_len": 401
    },
    {
        "db_id": "flight_2",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
        "predicted_sql": "select airline from flights where sourceairport = 'AHD'",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with source airport AHD?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
        "predicted_sql": "select airline from flights where sourceairport = 'AHD'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
        "predicted_sql": "select airline from flights where destairport = 'AHD'",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have a flight with destination airport AHD?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
        "predicted_sql": "select airline from flights where destairport = 'AHD'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
        "predicted_sql": "select distinct airline from flights where sourceairport = 'APG' and destairport = 'CVO'",
        "prompt_len": 397
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
        "predicted_sql": "select distinct airline from flights where sourceairport = 'APG' and destairport = 'CVO'",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
        "predicted_sql": "select distinct airline from flights where sourceairport = 'CVO' and sourceairport != 'APG'",
        "prompt_len": 398
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
        "predicted_sql": "select distinct airline from flights where sourceairport = 'CVO' and destairport != 'APG'",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights.",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
        "predicted_sql": "select airline from flights group by airline having count(*) >= 10",
        "prompt_len": 389
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have at least 10 flights?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
        "predicted_sql": "select airline from flights group by airline having count(*) >= 10",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights.",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
        "predicted_sql": "select airline from flights group by airline having count(*) < 200",
        "prompt_len": 389
    },
    {
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?",
        "gold_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
        "predicted_sql": "select airline from flights group by airline having count(*) < 200",
        "prompt_len": 387
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
        "predicted_sql": "select flightno from flights where airline = (select uid from airlines where airline = \"United Airlines\")",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
        "predicted_sql": "select flightno from flights where airline = 1",
        "prompt_len": 388
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "predicted_sql": "select flightno from flights where sourceairport = \"APG\"",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from APG.",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
        "predicted_sql": "select flightno from flights where sourceairport = \"APG\"",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
        "predicted_sql": "select flightno from flights where destairport = \"APG\"",
        "prompt_len": 392
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights landing at APG.",
        "gold_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
        "predicted_sql": "select flightno from flights where destairport = 'APG'",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select flightno from flights where sourceairport in (select airportcode from airports where city = \"Aberdeen\")",
        "prompt_len": 394
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select flightno from flights where sourceairport = 'ABZ'",
        "prompt_len": 389
    },
    {
        "db_id": "flight_2",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select flightno from flights where destairport in (select airportcode from airports where city = \"Aberdeen\")",
        "prompt_len": 393
    },
    {
        "db_id": "flight_2",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "gold_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
        "predicted_sql": "select flightno from flights where destairport = (select airportcode from airports where city = \"Aberdeen\")",
        "prompt_len": 389
    },
    {
        "db_id": "flight_2",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
        "predicted_sql": "select count(*) from flights where destairport in (select airportcode        from airports        where city in ('Aberdeen', 'Abilene'))",
        "prompt_len": 395
    },
    {
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?",
        "gold_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
        "predicted_sql": "select count(*) from flights where destairport in (select airportcode from airports where city in (\"Aberdeen\", \"Abilene\"))",
        "prompt_len": 390
    },
    {
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out.",
        "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "predicted_sql": "select airportname from airports where airportcode not in (select sourceairport from flights) and airportcode not in (select destairport from flights)",
        "prompt_len": 394
    },
    {
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?",
        "gold_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "predicted_sql": "select airportcode from airports where airportcode not in (select sourceairport from flights) and airportcode not in (select destairport from flights)",
        "prompt_len": 389
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "How many employees are there?",
        "gold_sql": "SELECT count(*) FROM employee",
        "predicted_sql": "select count(*) from employee",
        "prompt_len": 576
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees",
        "gold_sql": "SELECT count(*) FROM employee",
        "predicted_sql": "select count(*) from employee",
        "prompt_len": 575
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Sort employee names by their age in ascending order.",
        "gold_sql": "SELECT name FROM employee ORDER BY age",
        "predicted_sql": "select name from employee order by age asc",
        "prompt_len": 580
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "List the names of employees and sort in ascending order of age.",
        "gold_sql": "SELECT name FROM employee ORDER BY age",
        "predicted_sql": "select name, age from employee order by age asc",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is the number of employees from each city?",
        "gold_sql": "SELECT count(*) , city FROM employee GROUP BY city",
        "predicted_sql": "select city, count(*) from employee group by city",
        "prompt_len": 580
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of employees for each city.",
        "gold_sql": "SELECT count(*) , city FROM employee GROUP BY city",
        "predicted_sql": "select city, count(*) from employee group by city",
        "prompt_len": 579
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which cities do more than one employee under age 30 come from?",
        "gold_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "predicted_sql": "select city from employee where age < 30 group by city having count(*) > 1",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the cities that have more than one employee under age 30.",
        "gold_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
        "predicted_sql": "select city from employee where age < 30 group by city having count(*) > 1",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of shops in each location.",
        "gold_sql": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "predicted_sql": "select location, count(*) from shop group by location",
        "prompt_len": 579
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "How many shops are there in each location?",
        "gold_sql": "SELECT count(*) , LOCATION FROM shop GROUP BY LOCATION",
        "predicted_sql": "select location, count(*) from shop group by location",
        "prompt_len": 579
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "gold_sql": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
        "predicted_sql": "select manager_name, district from shop where number_products = (select max(number_products) from shop)",
        "prompt_len": 587
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "gold_sql": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
        "predicted_sql": "select manager_name, district from shop where number_products = (select max(number_products) from shop)",
        "prompt_len": 588
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "find the minimum and maximum number of products of all stores.",
        "gold_sql": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "predicted_sql": "select min(number_products), max(number_products) from shop",
        "prompt_len": 582
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "gold_sql": "SELECT min(Number_products) , max(Number_products) FROM shop",
        "predicted_sql": "select min(number_products), max(number_products) from shop",
        "prompt_len": 584
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "gold_sql": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
        "predicted_sql": "select name, location, district from shop order by number_products desc",
        "prompt_len": 588
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "gold_sql": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
        "predicted_sql": "select name, location, district from shop order by number_products desc",
        "prompt_len": 593
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "gold_sql": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "predicted_sql": "select name from shop where number_products > (select avg(number_products) from shop)",
        "prompt_len": 587
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "gold_sql": "SELECT name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
        "predicted_sql": "select name from shop where number_products > (select avg(number_products) from shop)",
        "prompt_len": 586
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from employee where employee_id in (select employee_id from evaluation group by employee_id order by count(*) desc limit 1)",
        "prompt_len": 585
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from employee where employee_id in (select employee_id from evaluation group by employee_id order by count(*) desc limit 1)",
        "prompt_len": 585
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "predicted_sql": "select name from employee where employee_id = (select employee_id from evaluation where bonus = (select max(bonus) from evaluation))",
        "prompt_len": 584
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "gold_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "predicted_sql": "select name from employee where employee_id = (select employee_id from evaluation where bonus = (select max(bonus) from evaluation))",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "predicted_sql": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "prompt_len": 584
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What are the names of the employees who never received any evaluation?",
        "gold_sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "predicted_sql": "select name from employee where employee_id not in (select employee_id from evaluation)",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from shop where shop_id = (select shop_id from hiring group by shop_id order by count(*) desc limit 1)",
        "prompt_len": 586
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which shop has the most employees? Give me the shop name.",
        "gold_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from shop where shop_id = (select shop_id from hiring group by shop_id order by count(*) desc limit 1)",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the shops that do not hire any employee.",
        "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "predicted_sql": "select name from shop where shop_id not in (select shop_id from hiring)",
        "prompt_len": 583
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which shops run with no employees? Find the shop names",
        "gold_sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "predicted_sql": "select name from shop where shop_id not in (select shop_id from hiring)",
        "prompt_len": 581
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "gold_sql": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
        "predicted_sql": "select shop.name, count(*) as number_of_employees from shop, hiring where shop.shop_id = hiring.shop_id group by shop.name",
        "prompt_len": 587
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "gold_sql": "SELECT count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
        "predicted_sql": "select shop.name, count(hiring.employee_id) as number_of_employees from shop join hiring on shop.shop_id = hiring.shop_id group by shop.name",
        "prompt_len": 588
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is total bonus given in all evaluations?",
        "gold_sql": "SELECT sum(bonus) FROM evaluation",
        "predicted_sql": "select sum(bonus) from evaluation",
        "prompt_len": 579
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "gold_sql": "SELECT sum(bonus) FROM evaluation",
        "predicted_sql": "select sum(bonus) from evaluation",
        "prompt_len": 582
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Give me all the information about hiring.",
        "gold_sql": "SELECT * FROM hiring",
        "predicted_sql": "select * from hiring",
        "prompt_len": 578
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "What is all the information about hiring?",
        "gold_sql": "SELECT * FROM hiring",
        "predicted_sql": "select * from hiring",
        "prompt_len": 578
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "gold_sql": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
        "predicted_sql": "select distinct district from shop where number_products < 3000 or number_products > 10000",
        "prompt_len": 588
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "gold_sql": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
        "predicted_sql": "select distinct district from shop where number_products < 3000 or number_products > 10000",
        "prompt_len": 592
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "How many different store locations are there?",
        "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "predicted_sql": "select count(distinct location) from shop",
        "prompt_len": 578
    },
    {
        "db_id": "employee_hire_evaluation",
        "question": "Count the number of distinct store locations.",
        "gold_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "predicted_sql": "select count(distinct location) from shop",
        "prompt_len": 578
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents do we have?",
        "gold_sql": "SELECT count(*) FROM Documents",
        "predicted_sql": "select count(*) from documents",
        "prompt_len": 668
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents.",
        "gold_sql": "SELECT count(*) FROM Documents",
        "predicted_sql": "select count(*) from documents",
        "prompt_len": 667
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "gold_sql": "SELECT document_id , document_name , document_description FROM Documents",
        "predicted_sql": "select document_id, document_name, document_description from documents",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, names, and descriptions for all documents?",
        "gold_sql": "SELECT document_id , document_name , document_description FROM Documents",
        "predicted_sql": "select document_id, document_name, document_description from documents",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "gold_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "predicted_sql": "select document_name, template_id from documents where document_description like '%w%'",
        "prompt_len": 682
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "gold_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "predicted_sql": "select document_name, template_id from documents where document_description like '%w%'",
        "prompt_len": 679
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "gold_sql": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
        "predicted_sql": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "prompt_len": 679
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "gold_sql": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
        "predicted_sql": "select document_id, template_id, document_description from documents where document_name = 'Robbin CV'",
        "prompt_len": 681
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many different templates do all document use?",
        "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "predicted_sql": "select count(distinct template_id) from documents",
        "prompt_len": 670
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of different templates used for documents.",
        "gold_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "predicted_sql": "select count(distinct template_id) from templates",
        "prompt_len": 671
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?",
        "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "predicted_sql": "select count(*) from documents d join templates t on d.template_id = t.template_id where t.template_type_code = 'PPT'",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type.",
        "gold_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
        "predicted_sql": "select count(*) from documents d join templates t on d.template_id = t.template_id where t.template_type_code = 'PPT'",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template ids and number of documents using each template.",
        "gold_sql": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
        "predicted_sql": "select template_id, count(document_id) as num_documents from templates join documents on templates.template_id = documents.template_id group by template_id",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "gold_sql": "SELECT template_id , count(*) FROM Documents GROUP BY template_id",
        "predicted_sql": "select template_id, count(*) from documents group by template_id",
        "prompt_len": 682
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the id and type code for the template used by the most documents?",
        "gold_sql": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select template_id, template_type_code from templates where template_id in (select template_id from documents group by template_id order by count(*) desc limit 1)",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "gold_sql": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select template_id, template_type_code from templates where template_id in (select template_id from documents group by template_id order by count(*) desc limit 1)",
        "prompt_len": 680
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates that are used by more than one document.",
        "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "predicted_sql": "select template_id from templates where template_id in (select template_id from documents group by template_id having count(*) > 1)",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids of any templates used in more than a single document?",
        "gold_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
        "predicted_sql": "select template_id from templates where template_id in (select template_id from documents group by template_id having count(*) > 1)",
        "prompt_len": 678
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show ids for all templates not used by any document.",
        "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "predicted_sql": "select template_id from templates where template_id not in (select template_id from documents)",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids for templates that are not used in any documents?",
        "gold_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "predicted_sql": "select template_id from templates where template_id not in (select template_id from documents)",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates do we have?",
        "gold_sql": "SELECT count(*) FROM Templates",
        "predicted_sql": "select count(*) from templates",
        "prompt_len": 668
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates.",
        "gold_sql": "SELECT count(*) FROM Templates",
        "predicted_sql": "select count(*) from templates",
        "prompt_len": 667
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "gold_sql": "SELECT template_id , version_number , template_type_code FROM Templates",
        "predicted_sql": "select template_id, version_number, template_type_code from templates",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "gold_sql": "SELECT template_id , version_number , template_type_code FROM Templates",
        "predicted_sql": "select template_id, version_number, template_type_code from templates",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all distinct template type codes for all templates.",
        "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "predicted_sql": "select distinct template_type_code from templates",
        "prompt_len": 671
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes?",
        "gold_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "predicted_sql": "select distinct template_type_code from ref_template_types",
        "prompt_len": 669
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "predicted_sql": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "gold_sql": "SELECT template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
        "predicted_sql": "select template_id from templates where template_type_code = 'PP' or template_type_code = 'PPT'",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many templates have template type code CV?",
        "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
        "predicted_sql": "select count(*) from templates where template_type_code = 'CV'",
        "prompt_len": 670
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of templates of the type CV.",
        "gold_sql": "SELECT count(*) FROM Templates WHERE template_type_code = \"CV\"",
        "predicted_sql": "select count(*) from templates where template_type_code = 'CV'",
        "prompt_len": 671
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "gold_sql": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "predicted_sql": "select version_number, template_type_code from templates where version_number > 5",
        "prompt_len": 680
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "gold_sql": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
        "predicted_sql": "select version_number, template_type_code from templates where version_number > 5",
        "prompt_len": 679
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and number of templates for each.",
        "gold_sql": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "predicted_sql": "select template_type_code, count(*) from templates group by template_type_code",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "gold_sql": "SELECT template_type_code , count(*) FROM Templates GROUP BY template_type_code",
        "predicted_sql": "select template_type_code, count(*) from templates group by template_type_code",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code has most number of templates?",
        "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select template_type_code, count(*) as cnt from templates group by template_type_code order by cnt desc limit 1",
        "prompt_len": 671
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type that the most templates belong to.",
        "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes with less than three templates.",
        "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
        "predicted_sql": "select template_type_code from templates group by template_type_code having count(*) < 3",
        "prompt_len": 672
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "gold_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
        "predicted_sql": "select template_type_code from ref_template_types where template_type_code in (select template_type_code from templates group by template_type_code having count(*) < 3)",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?",
        "gold_sql": "SELECT min(Version_Number) , template_type_code FROM Templates",
        "predicted_sql": "select min(version_number), template_type_code from templates",
        "prompt_len": 672
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "gold_sql": "SELECT min(Version_Number) , template_type_code FROM Templates",
        "predicted_sql": "select min(version_number), template_type_code from templates",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
        "predicted_sql": "select template_type_code from templates where template_id = (select template_id from documents where document_name = \"Data base\")",
        "prompt_len": 680
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
        "predicted_sql": "select template_type_code from templates where template_id in (select template_id from documents where document_name = 'Data base')",
        "prompt_len": 679
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document names using templates with template type code BK.",
        "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
        "predicted_sql": "select document_name from documents where template_id in (select template_id from templates where template_type_code = 'BK')",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the names of documents that use templates with the code BK?",
        "gold_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
        "predicted_sql": "select document_name from documents where template_id in (select template_id from templates where template_type_code = 'BK')",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type.",
        "gold_sql": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
        "predicted_sql": "select template_type_code, count(document_id) as num_documents from templates join documents on templates.template_id = documents.template_id group by template_type_code",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many documents use each type?",
        "gold_sql": "SELECT T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
        "predicted_sql": "select template_type_code, count(*) from templates group by template_type_code",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code is used by most number of documents?",
        "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select template_type_code, count(*) as cnt from templates t join documents d on t.template_id = d.template_id group by template_type_code order by cnt desc limit 1",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "gold_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select template_type_code from templates group by template_type_code order by count(*) desc limit 1",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document.",
        "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
        "predicted_sql": "select template_type_code from ref_template_types where template_type_code not in (select template_type_code from templates)",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?",
        "gold_sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
        "predicted_sql": "select template_type_code from ref_template_types where template_type_code not in (select template_type_code from templates)",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and descriptions.",
        "gold_sql": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "predicted_sql": "select template_type_code, template_type_description from ref_template_types",
        "prompt_len": 669
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the type codes and descriptions for all template types?",
        "gold_sql": "SELECT template_type_code , template_type_description FROM Ref_template_types",
        "predicted_sql": "select template_type_code, template_type_description from ref_template_types",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
        "predicted_sql": "select template_type_description from ref_template_types where template_type_code = \"AD\"",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the template type description of the template type with the code AD.",
        "gold_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
        "predicted_sql": "select template_type_description from ref_template_types where template_type_code = 'AD'",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the template type code for template type description \"Book\".",
        "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
        "predicted_sql": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the type code of the template type with the description \"Book\".",
        "gold_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
        "predicted_sql": "select template_type_code from ref_template_types where template_type_description = \"Book\"",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "predicted_sql": "select distinct template_type_description from ref_template_types where template_type_code in (select template_type_code from templates where template_id in (select template_id from documents))",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "gold_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
        "predicted_sql": "select distinct template_details from templates where template_id in (select template_id from documents)",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids with template type description \"Presentation\".",
        "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
        "predicted_sql": "select template_id from templates where template_type_code in (select template_type_code from ref_template_types where template_type_description = \"Presentation\")",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "gold_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
        "predicted_sql": "select template_id from templates where template_details = 'Presentation'",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs in total?",
        "gold_sql": "SELECT count(*) FROM Paragraphs",
        "predicted_sql": "select count(*) from paragraphs",
        "prompt_len": 667
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs.",
        "gold_sql": "SELECT count(*) FROM Paragraphs",
        "predicted_sql": "select count(*) from paragraphs",
        "prompt_len": 667
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "predicted_sql": "select count(*) from paragraphs where document_id in (select document_id from documents where document_name = 'Summer Show')",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "gold_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
        "predicted_sql": "select count(*) from paragraphs where document_id in (select document_id from documents where document_name = 'Summer Show')",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "predicted_sql": "select * from paragraphs where paragraph_text = 'Korea '",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "gold_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "predicted_sql": "select * from paragraphs where paragraph_text like '%Korea%'",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "gold_sql": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "predicted_sql": "select paragraph_id, paragraph_text from paragraphs where document_id in (select document_id from documents where document_name = 'Welcome to NY')",
        "prompt_len": 678
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "gold_sql": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
        "predicted_sql": "select paragraph_id, paragraph_text from paragraphs where document_id in (select document_id from documents where document_name = 'Welcome to NY')",
        "prompt_len": 679
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
        "predicted_sql": "select paragraph_text from paragraphs where document_id in (select document_id from documents where document_name = \"Customer reviews\")",
        "prompt_len": 672
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "gold_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
        "predicted_sql": "select paragraph_text from paragraphs where document_id in (select document_id from documents where document_name = 'Customer reviews')",
        "prompt_len": 676
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "gold_sql": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "predicted_sql": "select document_id, count(paragraph_id) as paragraph_count from paragraphs group by document_id order by document_id",
        "prompt_len": 680
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "gold_sql": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "predicted_sql": "select document_id, count(paragraph_id) as paragraph_count from paragraphs group by document_id order by document_id",
        "prompt_len": 681
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "gold_sql": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
        "predicted_sql": "select document_id, document_name, count(paragraph_id) as paragraph_count from documents join paragraphs on documents.document_id = paragraphs.document_id group by document_id",
        "prompt_len": 677
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "gold_sql": "SELECT T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
        "predicted_sql": "select documents.document_id, documents.document_name, count(paragraphs.paragraph_id) as paragraph_count from documents left join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id",
        "prompt_len": 682
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "List all document ids with at least two paragraphs.",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "predicted_sql": "select document_id from paragraphs group by document_id having count(paragraph_id) >= 2",
        "prompt_len": 672
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
        "predicted_sql": "select document_id from paragraphs group by document_id having count(paragraph_id) >= 2",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "gold_sql": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select document_id, document_name from documents where document_id = (select document_id from paragraphs group by document_id order by count(*) desc limit 1)",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id and name of the document with the most paragraphs.",
        "gold_sql": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select document_id, document_name from documents where document_id = (select document_id from paragraphs group by document_id order by count(*) desc limit 1)",
        "prompt_len": 674
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with least number of paragraphs?",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select document_id from paragraphs group by document_id order by count(*) asc limit 1",
        "prompt_len": 672
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the id of the document with the fewest paragraphs.",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select document_id from documents where document_id = (select document_id from paragraphs group by document_id order by count(*) asc limit 1)",
        "prompt_len": 673
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "predicted_sql": "select document_id from documents where document_id in (select document_id from paragraphs group by document_id having count(paragraph_id) between 1 and 2)",
        "prompt_len": 672
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "gold_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "predicted_sql": "select document_id from documents where document_id in (select document_id from paragraphs group by document_id having count(paragraph_id) between 1 and 2)",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
        "predicted_sql": "select document_id from paragraphs where paragraph_text in ('Brazil', 'Ireland')",
        "prompt_len": 675
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "gold_sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
        "predicted_sql": "select document_id from paragraphs where paragraph_text in ('Brazil', 'Ireland')",
        "prompt_len": 680
    },
    {
        "db_id": "course_teach",
        "question": "How many teachers are there?",
        "gold_sql": "SELECT count(*) FROM teacher",
        "predicted_sql": "select count(*) from teacher",
        "prompt_len": 370
    },
    {
        "db_id": "course_teach",
        "question": "What is the total count of teachers?",
        "gold_sql": "SELECT count(*) FROM teacher",
        "predicted_sql": "select count(*) from teacher",
        "prompt_len": 372
    },
    {
        "db_id": "course_teach",
        "question": "List the names of teachers in ascending order of age.",
        "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "predicted_sql": "select name from teacher order by age asc",
        "prompt_len": 375
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers ordered by ascending age?",
        "gold_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "predicted_sql": "select name from teacher order by age asc",
        "prompt_len": 376
    },
    {
        "db_id": "course_teach",
        "question": "What are the age and hometown of teachers?",
        "gold_sql": "SELECT Age , Hometown FROM teacher",
        "predicted_sql": "select age, hometown from teacher",
        "prompt_len": 373
    },
    {
        "db_id": "course_teach",
        "question": "What is the age and hometown of every teacher?",
        "gold_sql": "SELECT Age , Hometown FROM teacher",
        "predicted_sql": "select age, hometown from teacher",
        "prompt_len": 374
    },
    {
        "db_id": "course_teach",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "predicted_sql": "select name from teacher where hometown != \"Little Lever Urban District\"",
        "prompt_len": 380
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "gold_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "predicted_sql": "select name from teacher where hometown != \"Little Lever Urban District\"",
        "prompt_len": 382
    },
    {
        "db_id": "course_teach",
        "question": "Show the name of teachers aged either 32 or 33?",
        "gold_sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "predicted_sql": "select name from teacher where age = 32 or age = 33",
        "prompt_len": 375
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "gold_sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "predicted_sql": "select name from teacher where age = 32 or age = 33",
        "prompt_len": 379
    },
    {
        "db_id": "course_teach",
        "question": "What is the hometown of the youngest teacher?",
        "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "predicted_sql": "select hometown from teacher where age = (select min(age) from teacher)",
        "prompt_len": 373
    },
    {
        "db_id": "course_teach",
        "question": "Where is the youngest teacher from?",
        "gold_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "predicted_sql": "select hometown from teacher where age = (select min(age) from teacher)",
        "prompt_len": 371
    },
    {
        "db_id": "course_teach",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "gold_sql": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
        "predicted_sql": "select hometown, count(*) from teacher group by hometown",
        "prompt_len": 378
    },
    {
        "db_id": "course_teach",
        "question": "For each hometown, how many teachers are there?",
        "gold_sql": "SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
        "predicted_sql": "select hometown, count(*) from teacher group by hometown",
        "prompt_len": 374
    },
    {
        "db_id": "course_teach",
        "question": "List the most common hometown of teachers.",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select hometown, count(*) as count from teacher group by hometown order by count desc limit 1",
        "prompt_len": 372
    },
    {
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select hometown, count(*) as count from teacher group by hometown order by count desc limit 1",
        "prompt_len": 375
    },
    {
        "db_id": "course_teach",
        "question": "Show the hometowns shared by at least two teachers.",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "predicted_sql": "select hometown from teacher group by hometown having count(*)>1",
        "prompt_len": 375
    },
    {
        "db_id": "course_teach",
        "question": "What are the towns from which at least two teachers come from?",
        "gold_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "predicted_sql": "select hometown from teacher group by hometown having count(*)>=2",
        "prompt_len": 377
    },
    {
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "predicted_sql": "select name, course from teacher, course_arrange, course where teacher.teacher_id = course_arrange.teacher_id and course_arrange.course_id = course.course_id",
        "prompt_len": 377
    },
    {
        "db_id": "course_teach",
        "question": "What is the name of each teacher and what course they teach?",
        "gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "predicted_sql": "select name, course from teacher, course_arrange, course where teacher.teacher_id = course_arrange.teacher_id and course_arrange.course_id = course.course_id",
        "prompt_len": 377
    },
    {
        "db_id": "course_teach",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
        "predicted_sql": "select name, course from teacher, course_arrange, course where teacher.teacher_id = course_arrange.teacher_id and course_arrange.course_id = course.course_id order by name asc",
        "prompt_len": 387
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "gold_sql": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
        "predicted_sql": "select name, course from teacher, course_arrange, course where teacher.teacher_id = course_arrange.teacher_id and course_arrange.course_id = course.course_id order by name asc",
        "prompt_len": 388
    },
    {
        "db_id": "course_teach",
        "question": "Show the name of the teacher for the math course.",
        "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
        "predicted_sql": "select name from teacher where teacher_id in (select teacher_id from course_arrange where course_id in (select course_id from course where course = \"Math\"))",
        "prompt_len": 375
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the people who teach math courses?",
        "gold_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
        "predicted_sql": "select name from teacher where teacher_id in (select teacher_id from course_arrange where course_id in (select course_id from course where course = \"Math\"))",
        "prompt_len": 376
    },
    {
        "db_id": "course_teach",
        "question": "Show names of teachers and the number of courses they teach.",
        "gold_sql": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "predicted_sql": "select name, count(course_id) from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by name",
        "prompt_len": 376
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "gold_sql": "SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "predicted_sql": "select teacher.name, count(course_arrange.course_id) as course_count from teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id group by teacher.name",
        "prompt_len": 379
    },
    {
        "db_id": "course_teach",
        "question": "Show names of teachers that teach at least two courses.",
        "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
        "predicted_sql": "select name from teacher where teacher_id in (select teacher_id from course_arrange group by teacher_id having count(*)>=2)",
        "prompt_len": 375
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers who teach at least two courses?",
        "gold_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
        "predicted_sql": "select name from teacher where teacher_id in (select teacher_id from course_arrange group by teacher_id having count(*)>=2)",
        "prompt_len": 378
    },
    {
        "db_id": "course_teach",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "predicted_sql": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "prompt_len": 378
    },
    {
        "db_id": "course_teach",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "gold_sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "predicted_sql": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "prompt_len": 378
    },
    {
        "db_id": "museum_visit",
        "question": "How many visitors below age 30 are there?",
        "gold_sql": "SELECT count(*) FROM visitor WHERE age < 30",
        "predicted_sql": "select count(*) from visitor where age < 30",
        "prompt_len": 406
    },
    {
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "gold_sql": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "predicted_sql": "select name from visitor where level_of_membership > 4 order by level_of_membership desc",
        "prompt_len": 423
    },
    {
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "gold_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4",
        "predicted_sql": "select avg(age) from visitor where level_of_membership <= 4",
        "prompt_len": 414
    },
    {
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "gold_sql": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
        "predicted_sql": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "prompt_len": 424
    },
    {
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?",
        "gold_sql": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "predicted_sql": "select museum_id, name from museum where num_of_staff = (select max(num_of_staff) from museum)",
        "prompt_len": 412
    },
    {
        "db_id": "museum_visit",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "gold_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009",
        "predicted_sql": "select avg(num_of_staff) from museum where open_year < 2009",
        "prompt_len": 413
    },
    {
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "gold_sql": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
        "predicted_sql": "select open_year, num_of_staff from museum where name = \"Plaza Museum\"",
        "prompt_len": 412
    },
    {
        "db_id": "museum_visit",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "gold_sql": "SELECT name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
        "predicted_sql": "select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010)",
        "prompt_len": 418
    },
    {
        "db_id": "museum_visit",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "gold_sql": "SELECT t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
        "predicted_sql": "select visitor.id, visitor.name, visitor.age from visitor, visit where visitor.id = visit.visitor_id group by visitor.id having count(visit.visitor_id) > 1",
        "prompt_len": 414
    },
    {
        "db_id": "museum_visit",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "gold_sql": "SELECT t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "predicted_sql": "select visitor.id, visitor.name, visitor.level_of_membership from visitor, visit where visitor.id = visit.visitor_id group by visitor.id order by sum(visit.total_spent) desc limit 1",
        "prompt_len": 423
    },
    {
        "db_id": "museum_visit",
        "question": "What are the id and name of the museum visited most times?",
        "gold_sql": "SELECT t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select museum.museum_id, museum.name from museum join visit on museum.museum_id = visit.museum_id group by museum.museum_id order by count(*) desc limit 1",
        "prompt_len": 410
    },
    {
        "db_id": "museum_visit",
        "question": "What is the name of the museum that had no visitor yet?",
        "gold_sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "predicted_sql": "select name from museum where museum_id not in (select museum_id from visit)",
        "prompt_len": 410
    },
    {
        "db_id": "museum_visit",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "gold_sql": "SELECT t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "predicted_sql": "select visitor.name, visitor.age from visitor, visit where visitor.id = visit.visitor_id and visit.num_of_ticket = (select max(num_of_ticket) from visit)",
        "prompt_len": 413
    },
    {
        "db_id": "museum_visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "gold_sql": "SELECT avg(num_of_ticket) , max(num_of_ticket) FROM visit",
        "predicted_sql": "select avg(num_of_ticket), max(num_of_ticket) from visit",
        "prompt_len": 411
    },
    {
        "db_id": "museum_visit",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "gold_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
        "predicted_sql": "select sum(total_spent) from visit where visitor_id in (select id from visitor where level_of_membership = 1)",
        "prompt_len": 412
    },
    {
        "db_id": "museum_visit",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "gold_sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
        "predicted_sql": "select visitor.name from visitor, visit, museum where visitor.id = visit.visitor_id and visit.museum_id = museum.museum_id and museum.open_year < '2009' and museum.open_year > '2011'",
        "prompt_len": 419
    },
    {
        "db_id": "museum_visit",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "gold_sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
        "predicted_sql": "select count(*) from visitor where id not in (select visitor_id from visit where museum_id in (select museum_id from museum where open_year > 2010))",
        "prompt_len": 412
    },
    {
        "db_id": "museum_visit",
        "question": "How many museums were opened after 2013 or before 2008?",
        "gold_sql": "SELECT count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
        "predicted_sql": "select count(*) from museum where open_year > 2013 or open_year < 2008",
        "prompt_len": 408
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of players.",
        "gold_sql": "SELECT count(*) FROM players",
        "predicted_sql": "select count(*) from players",
        "prompt_len": 1079
    },
    {
        "db_id": "wta_1",
        "question": "How many players are there?",
        "gold_sql": "SELECT count(*) FROM players",
        "predicted_sql": "select count(*) from players",
        "prompt_len": 1078
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of matches.",
        "gold_sql": "SELECT count(*) FROM matches",
        "predicted_sql": "select count(*) from matches",
        "prompt_len": 1079
    },
    {
        "db_id": "wta_1",
        "question": "Count the number of matches.",
        "gold_sql": "SELECT count(*) FROM matches",
        "predicted_sql": "select count(*) from matches",
        "prompt_len": 1078
    },
    {
        "db_id": "wta_1",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "gold_sql": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
        "predicted_sql": "select first_name, birth_date from players where country_code = \"USA\"",
        "prompt_len": 1089
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names and birth dates of players from the USA?",
        "gold_sql": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
        "predicted_sql": "select first_name, birth_date from players where country_code = \"USA\"",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "Find the average age of losers and winners of all matches.",
        "gold_sql": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
        "predicted_sql": "select avg(winner_age) as avg_winner_age, avg(loser_age) as avg_loser_age from matches",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "What are the average ages of losers and winners across matches?",
        "gold_sql": "SELECT avg(loser_age) , avg(winner_age) FROM matches",
        "predicted_sql": "select avg(winner_age) as avg_winner_age, avg(loser_age) as avg_loser_age from matches",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "Find the average rank of winners in all matches.",
        "gold_sql": "SELECT avg(winner_rank) FROM matches",
        "predicted_sql": "select avg(winner_rank) from matches",
        "prompt_len": 1082
    },
    {
        "db_id": "wta_1",
        "question": "What is the average rank for winners in all matches?",
        "gold_sql": "SELECT avg(winner_rank) FROM matches",
        "predicted_sql": "select avg(winner_rank) from matches",
        "prompt_len": 1083
    },
    {
        "db_id": "wta_1",
        "question": "Find the highest rank of losers in all matches.",
        "gold_sql": "SELECT min(loser_rank) FROM matches",
        "predicted_sql": "select max(loser_rank) from matches",
        "prompt_len": 1082
    },
    {
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?",
        "gold_sql": "SELECT min(loser_rank) FROM matches",
        "predicted_sql": "select min(loser_rank) from matches",
        "prompt_len": 1083
    },
    {
        "db_id": "wta_1",
        "question": "find the number of distinct country codes of all players.",
        "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
        "predicted_sql": "select count(distinct country_code) from players",
        "prompt_len": 1083
    },
    {
        "db_id": "wta_1",
        "question": "How many distinct countries do players come from?",
        "gold_sql": "SELECT count(DISTINCT country_code) FROM players",
        "predicted_sql": "select count(distinct country_code) from players",
        "prompt_len": 1081
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of distinct name of losers.",
        "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "predicted_sql": "select count(distinct loser_name) from matches",
        "prompt_len": 1081
    },
    {
        "db_id": "wta_1",
        "question": "How many different loser names are there?",
        "gold_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "predicted_sql": "select count(distinct loser_name) from matches",
        "prompt_len": 1080
    },
    {
        "db_id": "wta_1",
        "question": "Find the name of tourney that has more than 10 matches.",
        "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "predicted_sql": "select tourney_name from matches group by tourney_name having count(*) > 10",
        "prompt_len": 1085
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "gold_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
        "predicted_sql": "select tourney_name from matches group by tourney_name having count(*) > 10",
        "prompt_len": 1085
    },
    {
        "db_id": "wta_1",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "gold_sql": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
        "predicted_sql": "select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "gold_sql": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
        "predicted_sql": "select winner_name from matches where year = 2013 and winner_id in (select winner_id from matches where year = 2016)",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "gold_sql": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
        "predicted_sql": "select count(*) from matches where year = 2013 or year = 2016",
        "prompt_len": 1087
    },
    {
        "db_id": "wta_1",
        "question": "How many matches were played in 2013 or 2016?",
        "gold_sql": "SELECT count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
        "predicted_sql": "select count(*) from matches where year = 2013 or year = 2016",
        "prompt_len": 1082
    },
    {
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "gold_sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "predicted_sql": "select distinct winner_ioc, winner_name from matches where tourney_name = \"WTA Championships\" and winner_id in (select winner_id from matches where tourney_name = \"Australian Open\")",
        "prompt_len": 1096
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "gold_sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "predicted_sql": "select distinct winner_name, winner_ioc from matches where tourney_name = \"WTA Championships\" and winner_id in ( select winner_id from matches where tourney_name = \"Australian Open\" )",
        "prompt_len": 1094
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player.",
        "gold_sql": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
        "predicted_sql": "select first_name, country_code from players where birth_date = (select min(birth_date) from players)",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?",
        "gold_sql": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
        "predicted_sql": "select first_name, country_code from players where birth_date = (select min(birth_date) from players)",
        "prompt_len": 1085
    },
    {
        "db_id": "wta_1",
        "question": "List the first and last name of all players in the order of birth date.",
        "gold_sql": "SELECT first_name , last_name FROM players ORDER BY birth_date",
        "predicted_sql": "select first_name, last_name from players order by birth_date",
        "prompt_len": 1088
    },
    {
        "db_id": "wta_1",
        "question": "What are the full names of all players, sorted by birth date?",
        "gold_sql": "SELECT first_name , last_name FROM players ORDER BY birth_date",
        "predicted_sql": "select first_name || ' ' || last_name as full_name, birth_date from players order by birth_date",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "gold_sql": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
        "predicted_sql": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "prompt_len": 1094
    },
    {
        "db_id": "wta_1",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "gold_sql": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
        "predicted_sql": "select first_name || \" \" || last_name as full_name, birth_date from players where hand = \"L\" order by birth_date",
        "prompt_len": 1089
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "gold_sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "predicted_sql": "select first_name, country_code from players where player_id in (select player_id from rankings where tours = (select max(tours) from rankings))",
        "prompt_len": 1090
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name and country code of the player with the most tours?",
        "gold_sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "predicted_sql": "select first_name, country_code from players where player_id in (select player_id from rankings where tours = (select max(tours) from rankings))",
        "prompt_len": 1088
    },
    {
        "db_id": "wta_1",
        "question": "Find the year that has the most number of matches.",
        "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select year, count(*) as num_matches from matches group by year order by num_matches desc limit 1",
        "prompt_len": 1083
    },
    {
        "db_id": "wta_1",
        "question": "Which year had the most matches?",
        "gold_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select year, count(*) as matches from matches group by year order by matches desc limit 1",
        "prompt_len": 1079
    },
    {
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "gold_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select winner_name, winner_rank_points from matches group by winner_name order by winner_rank_points desc limit 1",
        "prompt_len": 1087
    },
    {
        "db_id": "wta_1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "gold_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select winner_name, winner_rank_points from matches order by winner_rank_points desc limit 1",
        "prompt_len": 1096
    },
    {
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "predicted_sql": "select winner_name from matches where tourney_name = \"Australian Open\" and winner_rank_points = (select max(winner_rank_points) from matches where tourney_name = \"Australian Open\")",
        "prompt_len": 1093
    },
    {
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "gold_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "predicted_sql": "select winner_name from matches where tourney_name = \"Australian Open\" and winner_rank_points = (select max(winner_rank_points) from matches where tourney_name = \"Australian Open\")",
        "prompt_len": 1092
    },
    {
        "db_id": "wta_1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "gold_sql": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "predicted_sql": "select loser_name, winner_name from matches where minutes = (select max(minutes) from matches)",
        "prompt_len": 1090
    },
    {
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "gold_sql": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "predicted_sql": "select winner_name, loser_name from matches where minutes = (select max(minutes) from matches)",
        "prompt_len": 1088
    },
    {
        "db_id": "wta_1",
        "question": "Find the average ranking for each player and their first name.",
        "gold_sql": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        "predicted_sql": "select first_name, avg(ranking) from players join rankings on players.player_id = rankings.player_id group by players.player_id",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their average rankings?",
        "gold_sql": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        "predicted_sql": "select first_name, avg(ranking) from players join rankings on players.player_id = rankings.player_id group by first_name",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "Find the total ranking points for each player and their first name.",
        "gold_sql": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        "predicted_sql": "select first_name, sum(ranking_points) as total_ranking_points from players join rankings on players.player_id = rankings.player_id group by players.player_id",
        "prompt_len": 1085
    },
    {
        "db_id": "wta_1",
        "question": "What are the first names of all players, and their total ranking points?",
        "gold_sql": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
        "predicted_sql": "select first_name, sum(ranking_points) from players join rankings on players.player_id = rankings.player_id group by first_name",
        "prompt_len": 1087
    },
    {
        "db_id": "wta_1",
        "question": "find the number of players for each country.",
        "gold_sql": "SELECT count(*) , country_code FROM players GROUP BY country_code",
        "predicted_sql": "select country_code, count(*) as num_players from players group by country_code",
        "prompt_len": 1081
    },
    {
        "db_id": "wta_1",
        "question": "How many players are from each country?",
        "gold_sql": "SELECT count(*) , country_code FROM players GROUP BY country_code",
        "predicted_sql": "select country_code, count(*) from players group by country_code",
        "prompt_len": 1080
    },
    {
        "db_id": "wta_1",
        "question": "find the code of the country where has the greatest number of players.",
        "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select country_code, count(*) as num_players from players group by country_code order by num_players desc limit 1",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "What is the code of the country with the most players?",
        "gold_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select country_code, count(*) as num_players from players group by country_code order by num_players desc limit 1",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "Find the codes of countries that have more than 50 players.",
        "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "predicted_sql": "select country_code from players group by country_code having count(*) > 50",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "What are the codes of countries with more than 50 players?",
        "gold_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
        "predicted_sql": "select country_code from players group by country_code having count(*) > 50",
        "prompt_len": 1084
    },
    {
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date.",
        "gold_sql": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
        "predicted_sql": "select ranking_date, sum(tours) as total_tours from rankings group by ranking_date",
        "prompt_len": 1083
    },
    {
        "db_id": "wta_1",
        "question": "How many total tours were there for each ranking date?",
        "gold_sql": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
        "predicted_sql": "select ranking_date, sum(tours) as total_tours from rankings group by ranking_date",
        "prompt_len": 1083
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of matches happened in each year.",
        "gold_sql": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
        "predicted_sql": "select year, count(*) from matches group by year",
        "prompt_len": 1082
    },
    {
        "db_id": "wta_1",
        "question": "How many matches were played in each year?",
        "gold_sql": "SELECT count(*) , YEAR FROM matches GROUP BY YEAR",
        "predicted_sql": "select year, count(*) from matches group by year",
        "prompt_len": 1081
    },
    {
        "db_id": "wta_1",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "gold_sql": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "predicted_sql": "select winner_name, winner_rank from matches order by winner_age limit 3",
        "prompt_len": 1086
    },
    {
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "gold_sql": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "predicted_sql": "select winner_name, winner_rank from matches where winner_age = (select min(winner_age) from matches)",
        "prompt_len": 1087
    },
    {
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "predicted_sql": "select count(distinct winner_id) from matches where winner_id in (select player_id from players where hand = 'L') and tourney_name = 'WTA Championships'",
        "prompt_len": 1088
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "gold_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
        "predicted_sql": "select count(*) from matches where winner_hand = 'L' and tourney_level = 'W'",
        "prompt_len": 1087
    },
    {
        "db_id": "wta_1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "gold_sql": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "predicted_sql": "select winner_name, winner_ioc, winner_age from matches where winner_rank_points = (select max(winner_rank_points) from matches)",
        "prompt_len": 1095
    },
    {
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "gold_sql": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "predicted_sql": "select first_name, country_code, birth_date from players where player_id = (select winner_id from matches where winner_rank_points = (select max(winner_rank_points) from matches))",
        "prompt_len": 1097
    },
    {
        "db_id": "wta_1",
        "question": "Find the number of players for each hand type.",
        "gold_sql": "SELECT count(*) , hand FROM players GROUP BY hand",
        "predicted_sql": "select hand, count(*) from players group by hand",
        "prompt_len": 1082
    },
    {
        "db_id": "wta_1",
        "question": "How many players are there for each hand type?",
        "gold_sql": "SELECT count(*) , hand FROM players GROUP BY hand",
        "predicted_sql": "select hand, count(*) from players group by hand",
        "prompt_len": 1082
    },
    {
        "db_id": "battle_death",
        "question": "How many ships ended up being 'Captured'?",
        "gold_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "predicted_sql": "select count(*) from ship where disposition_of_ship = 'Captured'",
        "prompt_len": 560
    },
    {
        "db_id": "battle_death",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "gold_sql": "SELECT name , tonnage FROM ship ORDER BY name DESC",
        "predicted_sql": "select name, tonnage from ship order by name desc",
        "prompt_len": 569
    },
    {
        "db_id": "battle_death",
        "question": "List the name, date and result of each battle.",
        "gold_sql": "SELECT name , date FROM battle",
        "predicted_sql": "select name, date, result from battle",
        "prompt_len": 561
    },
    {
        "db_id": "battle_death",
        "question": "What is maximum and minimum death toll caused each time?",
        "gold_sql": "SELECT max(killed) , min(killed) FROM death",
        "predicted_sql": "select max(killed), min(killed) from death",
        "prompt_len": 561
    },
    {
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?",
        "gold_sql": "SELECT avg(injured) FROM death",
        "predicted_sql": "select avg(injured) from death",
        "prompt_len": 561
    },
    {
        "db_id": "battle_death",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "gold_sql": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
        "predicted_sql": "select * from death where caused_by_ship_id = (select id from ship where tonnage = 't')",
        "prompt_len": 568
    },
    {
        "db_id": "battle_death",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "gold_sql": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "predicted_sql": "select name, result from battle where bulgarian_commander != 'Boril'",
        "prompt_len": 572
    },
    {
        "db_id": "battle_death",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "gold_sql": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
        "predicted_sql": "select battle.id, battle.name from battle, ship where battle.id = ship.lost_in_battle and ship.ship_type = 'Brig'",
        "prompt_len": 572
    },
    {
        "db_id": "battle_death",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "gold_sql": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
        "predicted_sql": "select battle.id, battle.name from battle, death where battle.id = death.caused_by_ship_id and death.killed > 10",
        "prompt_len": 571
    },
    {
        "db_id": "battle_death",
        "question": "What is the ship id and name that caused most total injuries?",
        "gold_sql": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select ship.id, ship.name, sum(death.injured) as total_injuries from ship join death on ship.id = death.caused_by_ship_id group by ship.id order by total_injuries desc limit 1",
        "prompt_len": 563
    },
    {
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "gold_sql": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "predicted_sql": "select distinct name from battle where bulgarian_commander = 'Kaloyan' and latin_commander = 'Baldwin I'",
        "prompt_len": 578
    },
    {
        "db_id": "battle_death",
        "question": "How many different results are there for the battles?",
        "gold_sql": "SELECT count(DISTINCT RESULT) FROM battle",
        "predicted_sql": "select count(distinct result) from battle",
        "prompt_len": 560
    },
    {
        "db_id": "battle_death",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "gold_sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' )",
        "predicted_sql": "select count(*) from battle where id not in (select lost_in_battle from ship where tonnage = 225)",
        "prompt_len": 565
    },
    {
        "db_id": "battle_death",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "gold_sql": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
        "predicted_sql": "select name, date from battle where id in (select lost_in_battle from ship where name in ('Lettice', 'HMS Atalanta'))",
        "prompt_len": 579
    },
    {
        "db_id": "battle_death",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "gold_sql": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
        "predicted_sql": "select name, result, bulgarian_commander from battle where id not in (select lost_in_battle from ship where location = 'English Channel')",
        "prompt_len": 572
    },
    {
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?",
        "gold_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "predicted_sql": "select note from death where note like '%East%'",
        "prompt_len": 565
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?",
        "gold_sql": "SELECT line_1 , line_2 FROM addresses",
        "predicted_sql": "select line_1, line_2 from addresses",
        "prompt_len": 2021
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?",
        "gold_sql": "SELECT line_1 , line_2 FROM addresses",
        "predicted_sql": "select line_1, line_2 from addresses",
        "prompt_len": 2020
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses in total are listed?",
        "gold_sql": "SELECT count(*) FROM Courses",
        "predicted_sql": "select count(*) from courses",
        "prompt_len": 2017
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many courses are there?",
        "gold_sql": "SELECT count(*) FROM Courses",
        "predicted_sql": "select count(*) from courses",
        "prompt_len": 2015
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How is the math course described?",
        "gold_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "predicted_sql": "select course_description from courses where course_name = 'math'",
        "prompt_len": 2016
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the descriptions for all the math courses?",
        "gold_sql": "SELECT course_description FROM Courses WHERE course_name = 'math'",
        "predicted_sql": "select course_description from courses where course_name like '%math%'",
        "prompt_len": 2019
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "predicted_sql": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "prompt_len": 2023
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Chelsea?",
        "gold_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
        "predicted_sql": "select zip_postcode from addresses where city = 'Port Chelsea'",
        "prompt_len": 2018
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "gold_sql": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select department_name, department_id from departments where department_id in (select department_id from degree_programs group by department_id order by count(*) desc limit 1)",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "gold_sql": "select t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "predicted_sql": "select department_name, department_id from departments where department_id in (select department_id from degree_programs group by department_id order by count(*) desc limit 1)",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many departments offer any degree?",
        "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "predicted_sql": "select count(distinct department_id) from degree_programs",
        "prompt_len": 2016
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different departments offer degrees?",
        "gold_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "predicted_sql": "select count(distinct department_id) from degree_programs",
        "prompt_len": 2016
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different degree names are offered?",
        "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "predicted_sql": "select count(distinct degree_summary_name) from degree_programs",
        "prompt_len": 2017
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different degrees are offered?",
        "gold_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "predicted_sql": "select count(*) from degree_programs",
        "prompt_len": 2016
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department offer?",
        "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
        "predicted_sql": "select count(*) from degree_programs where department_id = (select department_id from departments where department_name = 'engineering')",
        "prompt_len": 2018
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?",
        "gold_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
        "predicted_sql": "select count(*) from degree_programs where department_id = (select department_id from departments where department_name = 'engineering')",
        "prompt_len": 2018
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions of all the sections?",
        "gold_sql": "SELECT section_name , section_description FROM Sections",
        "predicted_sql": "select section_name, section_description from sections",
        "prompt_len": 2020
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and descriptions for all the sections?",
        "gold_sql": "SELECT section_name , section_description FROM Sections",
        "predicted_sql": "select section_name, section_description from sections",
        "prompt_len": 2020
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and id of courses having at most 2 sections?",
        "gold_sql": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
        "predicted_sql": "select course_id, course_name from courses where course_id in (select course_id from sections group by course_id having count(*) <= 2)",
        "prompt_len": 2023
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "gold_sql": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
        "predicted_sql": "select course_id, course_name from courses where course_id in (select course_id from sections group by course_id having count(*) < 2)",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List the section_name in reversed lexicographical order.",
        "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "predicted_sql": "select section_name from sections order by section_name desc",
        "prompt_len": 2021
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "gold_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "predicted_sql": "select section_name from sections order by section_name desc",
        "prompt_len": 2022
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "gold_sql": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select semester_name, semester_id from semesters where semester_id in (select semester_id from student_enrolment group by semester_id order by count(*) desc limit 1)",
        "prompt_len": 2027
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "gold_sql": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select semester_id, semester_name from semesters where semester_id in (select semester_id from student_enrolment group by semester_id order by count(*) desc limit 1)",
        "prompt_len": 2028
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the description of the department whose name has the substring the computer?",
        "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "predicted_sql": "select department_description from departments where department_name like '%computer%'",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the department description for the one whose name has the word computer?",
        "gold_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "predicted_sql": "select department_description from departments where department_name like '%computer%'",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "gold_sql": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
        "predicted_sql": "select first_name, middle_name, last_name, student_id from students where student_id in (select student_id from student_enrolment group by student_id having count(*) = 2)",
        "prompt_len": 2034
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "gold_sql": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
        "predicted_sql": "select students.first_name, students.middle_name, students.last_name, students.student_id from students, student_enrolment, degree_programs where students.student_id = student_enrolment.student_id and student_enrolment.degree_program_id = degree_programs.degree_program_id group by students.student_id having count(degree_programs.degree_program_id) = 2",
        "prompt_len": 2039
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "gold_sql": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
        "predicted_sql": "select first_name, middle_name, last_name from students, student_enrolment, degree_programs where students.student_id = student_enrolment.student_id and student_enrolment.degree_program_id = degree_programs.degree_program_id and degree_programs.degree_summary_name = \"Bachelor\"",
        "prompt_len": 2029
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "gold_sql": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
        "predicted_sql": "select first_name, middle_name, last_name from students, student_enrolment, degree_programs where students.student_id = student_enrolment.student_id and student_enrolment.degree_program_id = degree_programs.degree_program_id and degree_programs.degree_summary_name = \"Bachelor\"",
        "prompt_len": 2029
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select degree_summary_name, count(*) as count from degree_programs dp join student_enrolment se on dp.degree_program_id = se.degree_program_id group by degree_summary_name order by count desc limit 1",
        "prompt_len": 2023
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "gold_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select degree_summary_name, count(*) as count from degree_programs dp join student_enrolment se on dp.degree_program_id = se.degree_program_id group by degree_summary_name order by count desc limit 1",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "gold_sql": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select degree_program_id, degree_summary_name from degree_programs where degree_program_id in ( select degree_program_id from student_enrolment group by degree_program_id order by count(*) desc limit 1 )",
        "prompt_len": 2029
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "gold_sql": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select degree_program_id, degree_summary_name from degree_programs where degree_program_id in (select degree_program_id from student_enrolment group by degree_program_id order by count(*) desc limit 1)",
        "prompt_len": 2027
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "gold_sql": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select student_id, first_name, middle_name, last_name, count(student_id) as enrollments, student_id from students join student_enrolment on students.student_id = student_enrolment.student_id group by student_id order by enrollments desc limit 1",
        "prompt_len": 2043
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "gold_sql": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select first_name, middle_name, last_name, student_id, count(*) as enrollments from students join student_enrolment on students.student_id = student_enrolment.student_id group by student_id order by enrollments desc limit 1",
        "prompt_len": 2041
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "predicted_sql": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the semester with no students enrolled?",
        "gold_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "predicted_sql": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "prompt_len": 2021
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
        "predicted_sql": "select course_name from courses where course_id in (select course_id from student_enrolment_courses)",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the names of all courses that have some students enrolled?",
        "gold_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
        "predicted_sql": "select course_name from courses where course_id in (select course_id from student_enrolment_courses)",
        "prompt_len": 2022
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What's the name of the course with most number of enrollments?",
        "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select course_name from courses where course_id = (select course_id from student_enrolment_courses group by course_id order by count(*) desc limit 1)",
        "prompt_len": 2023
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the name of the course with the most students enrolled?",
        "gold_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select course_name from courses where course_id = (select course_id from student_enrolment_courses group by course_id order by count(*) desc limit 1)",
        "prompt_len": 2022
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
        "predicted_sql": "select last_name from students where current_address_id in (select address_id from addresses where state_province_county = 'North Carolina') and student_id not in (select student_id from student_enrolment)",
        "prompt_len": 2034
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "gold_sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
        "predicted_sql": "select last_name from students, addresses where students.current_address_id = addresses.address_id and state_province_county = \"North Carolina\" and student_id not in (select student_id from student_enrolment)",
        "prompt_len": 2031
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "gold_sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
        "predicted_sql": "select transcript_id, transcript_date from transcripts where transcript_id in (select transcript_id from transcript_contents group by transcript_id having count(*) >= 2)",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "gold_sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
        "predicted_sql": "select transcript_id, transcript_date from transcripts where transcript_id in (select transcript_id from transcript_contents group by transcript_id having count(*) >= 2)",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "gold_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
        "predicted_sql": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "prompt_len": 2030
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "gold_sql": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
        "predicted_sql": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Ward'",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "predicted_sql": "select first_name, middle_name, last_name from students where date_first_registered = (select min(date_first_registered) from students)",
        "prompt_len": 2028
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the first student to register?",
        "gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "predicted_sql": "select first_name, middle_name, last_name from students where date_first_registered = (select min(date_first_registered) from students)",
        "prompt_len": 2026
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "predicted_sql": "select first_name, middle_name, last_name from students where date_left = (select min(date_left) from students)",
        "prompt_len": 2029
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "gold_sql": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "predicted_sql": "select first_name, middle_name, last_name from students where date_left = (select min(date_left) from students)",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "predicted_sql": "select first_name from students where current_address_id != permanent_address_id",
        "prompt_len": 2029
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "gold_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "predicted_sql": "select first_name from students where current_address_id != permanent_address_id",
        "prompt_len": 2029
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "gold_sql": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select current_address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details from students, addresses where current_address_id = address_id group by current_address_id order by count(*) desc limit 1",
        "prompt_len": 2027
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "gold_sql": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select address_id, line_1, line_2 from addresses where address_id in (select current_address_id from students group by current_address_id order by count(*) desc limit 1)",
        "prompt_len": 2028
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "On average, when were the transcripts printed?",
        "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
        "predicted_sql": "select avg(transcript_date) from transcripts",
        "prompt_len": 2018
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the average transcript date?",
        "gold_sql": "SELECT avg(transcript_date) FROM Transcripts",
        "predicted_sql": "select avg(transcript_date) from transcripts",
        "prompt_len": 2016
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "When is the first transcript released? List the date and details.",
        "gold_sql": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "predicted_sql": "select transcript_date, other_details from transcripts where transcript_id = (select min(transcript_id) from transcripts)",
        "prompt_len": 2022
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "gold_sql": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "predicted_sql": "select transcript_date, other_details from transcripts where transcript_date = (select min(transcript_date) from transcripts)",
        "prompt_len": 2027
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are released?",
        "gold_sql": "SELECT count(*) FROM Transcripts",
        "predicted_sql": "select count(*) from transcripts",
        "prompt_len": 2015
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many transcripts are listed?",
        "gold_sql": "SELECT count(*) FROM Transcripts",
        "predicted_sql": "select count(*) from transcripts",
        "prompt_len": 2015
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the last transcript release date?",
        "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "predicted_sql": "select max(transcript_date) from transcripts",
        "prompt_len": 2017
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "When was the last transcript released?",
        "gold_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "predicted_sql": "select max(transcript_date) from transcripts",
        "prompt_len": 2016
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "gold_sql": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select student_course_id, count(*) as count from transcript_contents group by student_course_id order by count desc limit 1",
        "prompt_len": 2031
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "gold_sql": "SELECT count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select student_course_id, count(*) as count from transcript_contents group by student_course_id order by count desc limit 1",
        "prompt_len": 2033
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "gold_sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select transcript_id, transcript_date from transcripts where transcript_id = (select min(transcript_id) from transcripts)",
        "prompt_len": 2028
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the date and id of the transcript with the least number of results?",
        "gold_sql": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select transcript_id, transcript_date from transcripts order by transcript_id limit 1",
        "prompt_len": 2025
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "predicted_sql": "select semester_name from semesters where semester_id in (select semester_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where degree_summary_name in ('Master', 'Bachelor')))",
        "prompt_len": 2023
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "gold_sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
        "predicted_sql": "select semester_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where degree_summary_name in ('Master', 'Bachelor'))",
        "prompt_len": 2027
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "How many different addresses do the students currently live?",
        "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "predicted_sql": "select count(distinct current_address_id) from students",
        "prompt_len": 2019
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?",
        "gold_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "predicted_sql": "select distinct line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details from addresses where address_id in (select current_address_id from students)",
        "prompt_len": 2020
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "List all the student details in reversed lexicographical order.",
        "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "predicted_sql": "select * from students order by last_name desc, first_name desc, middle_name desc",
        "prompt_len": 2021
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "gold_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "predicted_sql": "select other_student_details from students order by other_student_details desc",
        "prompt_len": 2024
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Describe the section h.",
        "gold_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "predicted_sql": "select * from sections where section_name = 'h'",
        "prompt_len": 2015
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What is the description for the section named h?",
        "gold_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "predicted_sql": "select section_description from sections where section_name = 'h'",
        "prompt_len": 2019
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
        "predicted_sql": "select first_name from students where permanent_address_id in (select address_id from addresses where country = 'Haiti') or cell_mobile_number = '09700166582'",
        "prompt_len": 2036
    },
    {
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "gold_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
        "predicted_sql": "select first_name from students where permanent_address_id in (select address_id from addresses where country = 'Haiti') or cell_mobile_number = '09700166582'",
        "prompt_len": 2035
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoons in alphabetical order.",
        "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "predicted_sql": "select title from cartoon order by title",
        "prompt_len": 740
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "gold_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "predicted_sql": "select title from cartoon order by title",
        "prompt_len": 740
    },
    {
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "predicted_sql": "select * from cartoon where directed_by = \"Ben Jones\"",
        "prompt_len": 738
    },
    {
        "db_id": "tvshow",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
        "predicted_sql": "select title from cartoon where directed_by = \"Ben Jones\"",
        "prompt_len": 741
    },
    {
        "db_id": "tvshow",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
        "predicted_sql": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "prompt_len": 740
    },
    {
        "db_id": "tvshow",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "gold_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
        "predicted_sql": "select count(*) from cartoon where written_by = \"Joseph Kuhr\"",
        "prompt_len": 743
    },
    {
        "db_id": "tvshow",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "gold_sql": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
        "predicted_sql": "select title, directed_by from cartoon order by original_air_date",
        "prompt_len": 741
    },
    {
        "db_id": "tvshow",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "gold_sql": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
        "predicted_sql": "select title, directed_by from cartoon order by original_air_date",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "predicted_sql": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "prompt_len": 747
    },
    {
        "db_id": "tvshow",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "gold_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
        "predicted_sql": "select title from cartoon where directed_by = \"Ben Jones\" or directed_by = \"Brandon Vietti\"",
        "prompt_len": 745
    },
    {
        "db_id": "tvshow",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "gold_sql": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select country, count(*) as number_of_tv_channels from tv_channel group by country order by number_of_tv_channels desc limit 1",
        "prompt_len": 751
    },
    {
        "db_id": "tvshow",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "gold_sql": "SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select country, count(*) as num_channels from tv_channel group by country order by num_channels desc limit 1",
        "prompt_len": 748
    },
    {
        "db_id": "tvshow",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "gold_sql": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel",
        "predicted_sql": "select count(distinct series_name), count(distinct content) from tv_channel",
        "prompt_len": 744
    },
    {
        "db_id": "tvshow",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "gold_sql": "SELECT count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel",
        "predicted_sql": "select count(distinct series_name), count(distinct content) from tv_channel",
        "prompt_len": 743
    },
    {
        "db_id": "tvshow",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "predicted_sql": "select content from tv_channel where series_name = \"Sky Radio\"",
        "prompt_len": 743
    },
    {
        "db_id": "tvshow",
        "question": "What is the content of the series Sky Radio?",
        "gold_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "predicted_sql": "select content from tv_channel where series_name = \"Sky Radio\"",
        "prompt_len": 739
    },
    {
        "db_id": "tvshow",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "predicted_sql": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "prompt_len": 744
    },
    {
        "db_id": "tvshow",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "gold_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "predicted_sql": "select package_option from tv_channel where series_name = \"Sky Radio\"",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "How many TV Channel using language English?",
        "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"",
        "predicted_sql": "select count(*) from tv_channel where language = 'English'",
        "prompt_len": 737
    },
    {
        "db_id": "tvshow",
        "question": "How many TV Channels use the English language?",
        "gold_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\"",
        "predicted_sql": "select count(*) from tv_channel where language = 'English'",
        "prompt_len": 739
    },
    {
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select language, count(language) as number_of_tv_channel from tv_channel group by language order by number_of_tv_channel asc limit 1",
        "prompt_len": 747
    },
    {
        "db_id": "tvshow",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select language, count(language) as count from tv_channel group by language order by count asc limit 1",
        "prompt_len": 749
    },
    {
        "db_id": "tvshow",
        "question": "List each language and the number of TV Channels using it.",
        "gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predicted_sql": "select language, count(*) from tv_channel group by language",
        "prompt_len": 742
    },
    {
        "db_id": "tvshow",
        "question": "For each language, list the number of TV Channels that use it.",
        "gold_sql": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predicted_sql": "select language, count(*) from tv_channel group by language",
        "prompt_len": 744
    },
    {
        "db_id": "tvshow",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"",
        "predicted_sql": "select series_name from tv_channel where id in (select channel from cartoon where title = \"The Rise of the Blue Beetle!\")",
        "prompt_len": 755
    },
    {
        "db_id": "tvshow",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"",
        "predicted_sql": "select series_name from tv_channel where id in (select channel from cartoon where title = \"The Rise of the Blue Beetle!\")",
        "prompt_len": 750
    },
    {
        "db_id": "tvshow",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "predicted_sql": "select title from cartoon where channel in (select id from tv_channel where series_name = \"Sky Radio\")",
        "prompt_len": 748
    },
    {
        "db_id": "tvshow",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "gold_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "predicted_sql": "select title from cartoon where channel in (select id from tv_channel where series_name = \"Sky Radio\")",
        "prompt_len": 752
    },
    {
        "db_id": "tvshow",
        "question": "List the Episode of all TV series sorted by rating.",
        "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "predicted_sql": "select episode from tv_series order by rating",
        "prompt_len": 740
    },
    {
        "db_id": "tvshow",
        "question": "What are all of the episodes ordered by ratings?",
        "gold_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "predicted_sql": "select episode from tv_series order by rating",
        "prompt_len": 739
    },
    {
        "db_id": "tvshow",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "gold_sql": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "predicted_sql": "select episode, rating from tv_series order by rating desc limit 3",
        "prompt_len": 747
    },
    {
        "db_id": "tvshow",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "gold_sql": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
        "predicted_sql": "select episode, rating from tv_series order by rating desc limit 3",
        "prompt_len": 747
    },
    {
        "db_id": "tvshow",
        "question": "What is minimum and maximum share of TV series?",
        "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series",
        "predicted_sql": "select min(share), max(share) from tv_series",
        "prompt_len": 739
    },
    {
        "db_id": "tvshow",
        "question": "What is the maximum and minimum share for the TV series?",
        "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series",
        "predicted_sql": "select max(share), min(share) from tv_series",
        "prompt_len": 741
    },
    {
        "db_id": "tvshow",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "predicted_sql": "select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "gold_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "predicted_sql": "select air_date from tv_series where episode = \"A Love of a Lifetime\"",
        "prompt_len": 742
    },
    {
        "db_id": "tvshow",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "predicted_sql": "select weekly_rank from tv_series where episode = \"A Love of a Lifetime\"",
        "prompt_len": 745
    },
    {
        "db_id": "tvshow",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "gold_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "predicted_sql": "select weekly_rank from tv_series where episode = \"A Love of a Lifetime\"",
        "prompt_len": 744
    },
    {
        "db_id": "tvshow",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"",
        "predicted_sql": "select series_name from tv_channel where id in (select channel from tv_series where episode = \"A Love of a Lifetime\")",
        "prompt_len": 754
    },
    {
        "db_id": "tvshow",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "gold_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"",
        "predicted_sql": "select series_name from tv_channel where id = (select channel from tv_series where episode = \"A Love of a Lifetime\")",
        "prompt_len": 747
    },
    {
        "db_id": "tvshow",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "predicted_sql": "select episode from tv_series where channel in (select id from tv_channel where series_name = \"Sky Radio\")",
        "prompt_len": 748
    },
    {
        "db_id": "tvshow",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "gold_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
        "predicted_sql": "select episode from tv_series where channel = (select id from tv_channel where series_name = \"Sky Radio\")",
        "prompt_len": 742
    },
    {
        "db_id": "tvshow",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "gold_sql": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "predicted_sql": "select directed_by, count(*) as number_of_cartoons from cartoon group by directed_by",
        "prompt_len": 742
    },
    {
        "db_id": "tvshow",
        "question": "How many cartoons did each director create?",
        "gold_sql": "SELECT count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
        "predicted_sql": "select directed_by, count(*) as count from cartoon group by directed_by",
        "prompt_len": 737
    },
    {
        "db_id": "tvshow",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "gold_sql": "select production_code , channel from cartoon order by original_air_date desc limit 1",
        "predicted_sql": "select production_code, channel from cartoon order by original_air_date desc limit 1",
        "prompt_len": 742
    },
    {
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "gold_sql": "select production_code , channel from cartoon order by original_air_date desc limit 1",
        "predicted_sql": "select production_code, channel from cartoon where original_air_date = (select max(original_air_date) from cartoon)",
        "prompt_len": 744
    },
    {
        "db_id": "tvshow",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "gold_sql": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
        "predicted_sql": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "gold_sql": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
        "predicted_sql": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "prompt_len": 750
    },
    {
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "predicted_sql": "select distinct country from tv_channel where id in ( select channel from cartoon where written_by = \"Todd Casey\" )",
        "prompt_len": 743
    },
    {
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "gold_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "predicted_sql": "select distinct country from tv_channel where id in ( select channel from cartoon where written_by = \"Todd Casey\" )",
        "prompt_len": 745
    },
    {
        "db_id": "tvshow",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "predicted_sql": "select distinct country from tv_channel where id not in ( select channel from cartoon where written_by = 'Todd Casey' )",
        "prompt_len": 744
    },
    {
        "db_id": "tvshow",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "gold_sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
        "predicted_sql": "select distinct country from tv_channel where id not in ( select channel from cartoon where written_by = \"Todd Casey\" )",
        "prompt_len": 743
    },
    {
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "gold_sql": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
        "predicted_sql": "select tv_channel.series_name, tv_channel.country from tv_channel, cartoon where tv_channel.id = cartoon.channel and cartoon.directed_by = \"Ben Jones\" and cartoon.directed_by = \"Michael Chang\"",
        "prompt_len": 752
    },
    {
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "gold_sql": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
        "predicted_sql": "select tv_channel.series_name, tv_channel.country from tv_channel, cartoon where tv_channel.id = cartoon.channel and (cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Michael Chang\")",
        "prompt_len": 755
    },
    {
        "db_id": "tvshow",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "gold_sql": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
        "predicted_sql": "select pixel_aspect_ratio_par, country from tv_channel where language != \"English\"",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "gold_sql": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
        "predicted_sql": "select pixel_aspect_ratio_par, country from tv_channel where language != \"English\"",
        "prompt_len": 749
    },
    {
        "db_id": "tvshow",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
        "predicted_sql": "select id from tv_channel where country in (select country from tv_channel group by country having count(*) > 2)",
        "prompt_len": 747
    },
    {
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "gold_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*) > 2",
        "predicted_sql": "select id from tv_channel group by id having count(*) > 2",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "predicted_sql": "select id from tv_channel where id not in (select channel from cartoon where directed_by = \"Ben Jones\")",
        "prompt_len": 746
    },
    {
        "db_id": "tvshow",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "gold_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
        "predicted_sql": "select id from tv_channel where id not in (select channel from cartoon where directed_by = \"Ben Jones\")",
        "prompt_len": 749
    },
    {
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "predicted_sql": "select package_option from tv_channel where id not in (select channel      from cartoon      where directed_by = 'Ben Jones')",
        "prompt_len": 748
    },
    {
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "gold_sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
        "predicted_sql": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by = \"Ben Jones\")",
        "prompt_len": 749
    },
    {
        "db_id": "poker_player",
        "question": "How many poker players are there?",
        "gold_sql": "SELECT count(*) FROM poker_player",
        "predicted_sql": "select count(*) from poker_player",
        "prompt_len": 366
    },
    {
        "db_id": "poker_player",
        "question": "Count the number of poker players.",
        "gold_sql": "SELECT count(*) FROM poker_player",
        "predicted_sql": "select count(*) from poker_player",
        "prompt_len": 366
    },
    {
        "db_id": "poker_player",
        "question": "List the earnings of poker players in descending order.",
        "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "predicted_sql": "select earnings from poker_player order by earnings desc",
        "prompt_len": 369
    },
    {
        "db_id": "poker_player",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "gold_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "predicted_sql": "select earnings from poker_player order by earnings desc",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "gold_sql": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "predicted_sql": "select final_table_made, best_finish from poker_player",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "gold_sql": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
        "predicted_sql": "select final_table_made, best_finish from poker_player",
        "prompt_len": 373
    },
    {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players?",
        "gold_sql": "SELECT avg(Earnings) FROM poker_player",
        "predicted_sql": "select avg(earnings) from poker_player",
        "prompt_len": 368
    },
    {
        "db_id": "poker_player",
        "question": "Return the average earnings across all poker players.",
        "gold_sql": "SELECT avg(Earnings) FROM poker_player",
        "predicted_sql": "select avg(earnings) from poker_player",
        "prompt_len": 368
    },
    {
        "db_id": "poker_player",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "predicted_sql": "select money_rank from poker_player where earnings = (select max(earnings) from poker_player)",
        "prompt_len": 373
    },
    {
        "db_id": "poker_player",
        "question": "Return the money rank of the player with the greatest earnings.",
        "gold_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "predicted_sql": "select money_rank from poker_player where earnings = (select max(earnings) from poker_player)",
        "prompt_len": 371
    },
    {
        "db_id": "poker_player",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "predicted_sql": "select max(final_table_made) from poker_player where earnings < 200000",
        "prompt_len": 378
    },
    {
        "db_id": "poker_player",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "gold_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "predicted_sql": "select max(final_table_made) from poker_player where earnings < 200000",
        "prompt_len": 376
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players?",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id",
        "prompt_len": 367
    },
    {
        "db_id": "poker_player",
        "question": "Return the names of all the poker players.",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id",
        "prompt_len": 368
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id where earnings > 300000",
        "prompt_len": 374
    },
    {
        "db_id": "poker_player",
        "question": "Give the names of poker players who have earnings above 300000.",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id where earnings > 300000",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id order by final_table_made asc",
        "prompt_len": 375
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id order by final_table_made asc",
        "prompt_len": 379
    },
    {
        "db_id": "poker_player",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "predicted_sql": "select birth_date from people where people_id = (select people_id from poker_player where earnings = (select min(earnings) from poker_player))",
        "prompt_len": 373
    },
    {
        "db_id": "poker_player",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "gold_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "predicted_sql": "select birth_date from people where people_id = (select people_id from poker_player where earnings = (select min(earnings) from poker_player))",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "What is the money rank of the tallest poker player?",
        "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "predicted_sql": "select money_rank from poker_player where people_id in (select people_id from people where height = (select max(height) from people))",
        "prompt_len": 370
    },
    {
        "db_id": "poker_player",
        "question": "Return the money rank of the poker player with the greatest height.",
        "gold_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "predicted_sql": "select money_rank from poker_player where height = (select max(height) from people)",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
        "predicted_sql": "select avg(earnings) from poker_player, people where poker_player.people_id = people.people_id and height > 200",
        "prompt_len": 373
    },
    {
        "db_id": "poker_player",
        "question": "Give average earnings of poker players who are taller than 200.",
        "gold_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
        "predicted_sql": "select avg(earnings) from poker_player, people where poker_player.people_id = people.people_id and height > 200",
        "prompt_len": 371
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of poker players in descending order of earnings?",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id order by earnings desc",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "gold_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
        "predicted_sql": "select name from people join poker_player on people.people_id = poker_player.people_id order by earnings desc",
        "prompt_len": 371
    },
    {
        "db_id": "poker_player",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "gold_sql": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predicted_sql": "select nationality, count(*) from people group by nationality",
        "prompt_len": 376
    },
    {
        "db_id": "poker_player",
        "question": "How many people are there of each nationality?",
        "gold_sql": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predicted_sql": "select nationality, count(*) from people group by nationality",
        "prompt_len": 368
    },
    {
        "db_id": "poker_player",
        "question": "What is the most common nationality of people?",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select nationality, count(*) as count from people group by nationality order by count desc limit 1",
        "prompt_len": 368
    },
    {
        "db_id": "poker_player",
        "question": "Give the nationality that is most common across all people.",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select nationality, count(*) as count from people group by nationality order by count desc limit 1",
        "prompt_len": 370
    },
    {
        "db_id": "poker_player",
        "question": "What are the nationalities that are shared by at least two people?",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "predicted_sql": "select nationality from people group by nationality having count(*) > 1",
        "prompt_len": 373
    },
    {
        "db_id": "poker_player",
        "question": "Return the nationalities for which there are two or more people.",
        "gold_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "predicted_sql": "select nationality from people group by nationality having count(*) >= 2",
        "prompt_len": 372
    },
    {
        "db_id": "poker_player",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "gold_sql": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
        "predicted_sql": "select name, birth_date from people order by name asc",
        "prompt_len": 375
    },
    {
        "db_id": "poker_player",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "gold_sql": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
        "predicted_sql": "select name, birth_date from people order by name",
        "prompt_len": 378
    },
    {
        "db_id": "poker_player",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "predicted_sql": "select name from people where nationality != \"Russia\"",
        "prompt_len": 370
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who are not from Russia?",
        "gold_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "predicted_sql": "select name from people where nationality != \"Russia\"",
        "prompt_len": 371
    },
    {
        "db_id": "poker_player",
        "question": "List the names of people that are not poker players.",
        "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "predicted_sql": "select name from people where people_id not in (select people_id from poker_player)",
        "prompt_len": 370
    },
    {
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?",
        "gold_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "predicted_sql": "select name from people where people_id not in (select people_id from poker_player)",
        "prompt_len": 371
    },
    {
        "db_id": "poker_player",
        "question": "How many distinct nationalities are there?",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "predicted_sql": "select count(distinct nationality) from people",
        "prompt_len": 367
    },
    {
        "db_id": "poker_player",
        "question": "Count the number of different nationalities.",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "predicted_sql": "select count(distinct nationality) from people",
        "prompt_len": 367
    },
    {
        "db_id": "voter_1",
        "question": "How many states are there?",
        "gold_sql": "SELECT count(*) FROM area_code_state",
        "predicted_sql": "select count(distinct state) from area_code_state",
        "prompt_len": 413
    },
    {
        "db_id": "voter_1",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "gold_sql": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
        "predicted_sql": "select contestant_number, contestant_name from contestants order by contestant_name desc",
        "prompt_len": 420
    },
    {
        "db_id": "voter_1",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "gold_sql": "SELECT vote_id , phone_number , state FROM votes",
        "predicted_sql": "select vote_id, phone_number, state from votes",
        "prompt_len": 421
    },
    {
        "db_id": "voter_1",
        "question": "What are the maximum and minimum values of area codes?",
        "gold_sql": "SELECT max(area_code) , min(area_code) FROM area_code_state",
        "predicted_sql": "select max(area_code), min(area_code) from area_code_state",
        "prompt_len": 418
    },
    {
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?",
        "gold_sql": "SELECT max(created) FROM votes WHERE state = 'CA'",
        "predicted_sql": "select created from votes where state = 'CA' order by created desc limit 1",
        "prompt_len": 420
    },
    {
        "db_id": "voter_1",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "gold_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "predicted_sql": "select contestant_name from contestants where contestant_name != 'Jessie Alloway'",
        "prompt_len": 424
    },
    {
        "db_id": "voter_1",
        "question": "What are the distinct states and create time of all votes?",
        "gold_sql": "SELECT DISTINCT state , created FROM votes",
        "predicted_sql": "select distinct state, created from votes",
        "prompt_len": 419
    },
    {
        "db_id": "voter_1",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
        "predicted_sql": "select contestant_number, contestant_name from contestants where contestant_number in (select contestant_number from votes group by contestant_number having count(*) >= 2)",
        "prompt_len": 424
    },
    {
        "db_id": "voter_1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "gold_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "predicted_sql": "select contestant_number, contestant_name from contestants where contestant_number not in (select contestant_number from votes)",
        "prompt_len": 430
    },
    {
        "db_id": "voter_1",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "gold_sql": "SELECT count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
        "predicted_sql": "select count(*) from votes where state = 'NY' or state = 'CA'",
        "prompt_len": 422
    },
    {
        "db_id": "voter_1",
        "question": "How many contestants did not get voted?",
        "gold_sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "predicted_sql": "select count(*) from contestants where contestant_number not in (select contestant_number from votes)",
        "prompt_len": 415
    },
    {
        "db_id": "voter_1",
        "question": "What is the area code in which the most voters voted?",
        "gold_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select state, count(*) as count from votes join area_code_state on votes.state = area_code_state.state group by state order by count desc limit 1",
        "prompt_len": 419
    },
    {
        "db_id": "voter_1",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "gold_sql": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
        "predicted_sql": "select created, state, phone_number from votes where contestant_number = (select contestant_number from contestants where contestant_name = 'Tabatha Gehling')",
        "prompt_len": 433
    },
    {
        "db_id": "voter_1",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "gold_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
        "predicted_sql": "select area_code from area_code_state where state in ( select state from votes where contestant_number in ( select contestant_number from contestants where contestant_name in ('Tabatha Gehling', 'Kelly Clauss') ) )",
        "prompt_len": 433
    },
    {
        "db_id": "voter_1",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "gold_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "predicted_sql": "select contestant_name from contestants where contestant_name like '%Al%'",
        "prompt_len": 423
    },
    {
        "db_id": "world_1",
        "question": "What are the names of all the countries that became independent after 1950?",
        "gold_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "predicted_sql": "select name from country where indepyear > 1950",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Give the names of the nations that were founded after 1950.",
        "gold_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "predicted_sql": "select name from country where indepyear > 1950",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "How many countries have a republic as their form of government?",
        "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
        "predicted_sql": "select count(*) from country where governmentform = 'Republic'",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "How many countries have governments that are republics?",
        "gold_sql": "SELECT count(*) FROM country WHERE GovernmentForm = \"Republic\"",
        "predicted_sql": "select count(*) from country where governmentform = 'Republic'",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
        "predicted_sql": "select sum(surfacearea) from country where region = \"Caribbean\"",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
        "predicted_sql": "select sum(surfacearea) from country where region = \"Caribbean\"",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "Which continent is Anguilla in?",
        "gold_sql": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
        "predicted_sql": "select continent from country where name = \"Anguilla\"",
        "prompt_len": 855
    },
    {
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?",
        "gold_sql": "SELECT Continent FROM country WHERE Name = \"Anguilla\"",
        "predicted_sql": "select continent from country where name = \"Anguilla\"",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?",
        "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
        "predicted_sql": "select district from city where name = \"Kabul\"",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "What region is Kabul in?",
        "gold_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
        "predicted_sql": "select district from city where name = \"Kabul\"",
        "prompt_len": 853
    },
    {
        "db_id": "world_1",
        "question": "Which language is the most popular in Aruba?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "predicted_sql": "select language from countrylanguage where countrycode = 'ABW' order by percentage desc limit 1",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "predicted_sql": "select language from countrylanguage where countrycode = \"ABW\"",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "What are the population and life expectancies in Brazil?",
        "gold_sql": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "predicted_sql": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "gold_sql": "SELECT Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "predicted_sql": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What are the region and population of Angola?",
        "gold_sql": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
        "predicted_sql": "select region, population from country where name = \"Angola\"",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "What region does Angola belong to and what is its population?",
        "gold_sql": "SELECT Population , Region FROM country WHERE Name = \"Angola\"",
        "predicted_sql": "select region, population from country where name = \"Angola\"",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
        "predicted_sql": "select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
        "predicted_sql": "select avg(lifeexpectancy) from country where region = \"Central Africa\"",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "gold_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "predicted_sql": "select name from country where continent = \"Asia\" and lifeexpectancy = (select min(lifeexpectancy) from country where continent = \"Asia\")",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "gold_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "predicted_sql": "select name from country where continent = \"Asia\" and lifeexpectancy = (select min(lifeexpectancy) from country where continent = \"Asia\")",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "What is the total population and maximum GNP in Asia?",
        "gold_sql": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
        "predicted_sql": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "gold_sql": "SELECT sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
        "predicted_sql": "select sum(population) as population, max(gnp) as gnp from country where continent = \"Asia\"",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?",
        "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
        "predicted_sql": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
        "predicted_sql": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
        "predicted_sql": "select sum(surfacearea) from country where continent = 'Asia' or continent = 'Europe'",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "gold_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
        "predicted_sql": "select sum(surfacearea) from country where continent = 'Asia' or continent = 'Europe'",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "How many people live in Gelderland district?",
        "gold_sql": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
        "predicted_sql": "select sum(population) from city where district = \"Gelderland\"",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "What is the total population of Gelderland district?",
        "gold_sql": "SELECT sum(Population) FROM city WHERE District = \"Gelderland\"",
        "predicted_sql": "select sum(population) from city where district = \"Gelderland\"",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "gold_sql": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
        "predicted_sql": "select avg(gnp), sum(population) from country where governmentform like '%territory%'",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "gold_sql": "SELECT avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
        "predicted_sql": "select avg(gnp), sum(population) from country where continent = \"North America\" and region = \"Caribbean\"",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "How many unique languages are spoken in the world?",
        "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "predicted_sql": "select count(distinct language) from countrylanguage",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "What is the number of distinct languages used around the world?",
        "gold_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "predicted_sql": "select count(distinct language) from countrylanguage",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "How many type of governments are in Africa?",
        "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
        "predicted_sql": "select count(distinct governmentform) from country where continent = \"Africa\"",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "How many different forms of governments are there in Africa?",
        "gold_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
        "predicted_sql": "select count(distinct governmentform) from country where continent = \"Africa\"",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?",
        "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
        "predicted_sql": "select count(language) from countrylanguage where countrycode = 'ABW'",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "How many languages are spoken in Aruba?",
        "gold_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
        "predicted_sql": "select count(*) from countrylanguage where countrycode = 'ABW'",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?",
        "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
        "predicted_sql": "select count(*) from countrylanguage where countrycode = 'AFG' and isofficial = 'T'",
        "prompt_len": 855
    },
    {
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?",
        "gold_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
        "predicted_sql": "select count(*) from countrylanguage where countrycode = 'AFG' and isofficial = 'T'",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage group by countrycode order by count(*) desc limit 1)",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage group by countrycode having count(*) = (select max(count) from (select count(*) as count from countrylanguage group by countrycode)))",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Which continent has the most diverse languages?",
        "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select continent, count(distinct language) as num_languages from country c join countrylanguage cl on c.code = cl.countrycode group by continent order by num_languages desc limit 1",
        "prompt_len": 855
    },
    {
        "db_id": "world_1",
        "question": "Which continent speaks the most languages?",
        "gold_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select continent, count(language) as num_languages from countrylanguage join country on country.code = countrylanguage.countrycode group by continent order by num_languages desc limit 1",
        "prompt_len": 854
    },
    {
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?",
        "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
        "predicted_sql": "select count(*) from countrylanguage where language = \"English\" and countrycode in (select countrycode from countrylanguage where language = \"Dutch\")",
        "prompt_len": 856
    },
    {
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?",
        "gold_sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
        "predicted_sql": "select count(*) from countrylanguage where language = 'English' or language = 'Dutch'",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What are the names of nations speak both English and French?",
        "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage where language in ('English', 'French') group by countrycode having count(*) = 2)",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "Give the names of nations that speak both English and French.",
        "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage where language in ('English', 'French') group by countrycode having count(*) = 2)",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What are the names of nations where both English and French are official languages?",
        "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage where language in ('English', 'French') group by countrycode having count(*) = 2)",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages.",
        "gold_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage where language in ('English', 'French') and isofficial = 'T')",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
        "predicted_sql": "select count(distinct continent) from countrylanguage where language = 'Chinese'",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "How many continents speak Chinese?",
        "gold_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
        "predicted_sql": "select count(distinct continent) from countrylanguage where language = 'Chinese'",
        "prompt_len": 853
    },
    {
        "db_id": "world_1",
        "question": "What are the regions that use English or Dutch?",
        "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
        "predicted_sql": "select distinct region from country where code in (select countrycode from countrylanguage where language in ('English', 'Dutch'))",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "Which regions speak Dutch or English?",
        "gold_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
        "predicted_sql": "select distinct region from country where code in (select countrycode from countrylanguage where language in ('Dutch', 'English'))",
        "prompt_len": 854
    },
    {
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "gold_sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage where language in ('English', 'Dutch') and isofficial = 'T')",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?",
        "gold_sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
        "predicted_sql": "select name from country where code in (select countrycode from countrylanguage where language in ('English', 'Dutch') and isofficial = 'T')",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "Which language is the most popular on the Asian continent?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "predicted_sql": "select language from countrylanguage where countrycode in (select code from country where continent = 'Asia') order by percentage desc limit 1",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "predicted_sql": "select language from countrylanguage where countrycode in (select code from country where continent = \"Asia\") group by language order by count(*) desc limit 1",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
        "predicted_sql": "select language from countrylanguage where countrycode in (select code from country where governmentform = 'Republic') group by language having count(*) = 1",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What languages are only used by a single country with a republic government?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
        "predicted_sql": "select language from countrylanguage where countrycode in (select code from country where governmentform = 'Republic') group by language having count(*) = 1",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Find the city with the largest population that uses English.",
        "gold_sql": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "predicted_sql": "select name from city where id in (select capital from country where code in (select countrycode from countrylanguage where language = 'English'))  ",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "What is the most populace city that speaks English?",
        "gold_sql": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "predicted_sql": "select name from city where population = (select max(population) from city where id in (select capital from country where code in (select countrycode from countrylanguage where language = \"English\")))  ",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "gold_sql": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "predicted_sql": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "gold_sql": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "predicted_sql": "select name, population, lifeexpectancy from country where continent = \"Asia\" and surfacearea = (select max(surfacearea) from country where continent = \"Asia\")",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
        "predicted_sql": "select avg(lifeexpectancy) from country where code not in (select countrycode from countrylanguage where isofficial = 'T' and language = 'English')",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "gold_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
        "predicted_sql": "select avg(lifeexpectancy) from country where code not in (select countrycode from countrylanguage where isofficial = 'T' and language = 'English')",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?",
        "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
        "predicted_sql": "select sum(population) from country where code not in (select countrycode from countrylanguage where language = 'English')",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?",
        "gold_sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
        "predicted_sql": "select sum(population) from country where code not in (select countrycode from countrylanguage where language = 'English')",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
        "predicted_sql": "select language from countrylanguage where countrycode in (select code from country where headofstate = \"Beatrix\")",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "gold_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
        "predicted_sql": "select language from countrylanguage where countrycode in (select code from country where headofstate = \"Beatrix\")",
        "prompt_len": 867
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
        "predicted_sql": "select count(distinct language) from countrylanguage where countrycode in (select code from country where indepyear < 1930) and isofficial = 'T'",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "gold_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
        "predicted_sql": "select count(distinct language) from countrylanguage where countrycode in (select code from country where indepyear < 1930)",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "gold_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
        "predicted_sql": "select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe')",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Which countries have greater area than that of any country in Europe?",
        "gold_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
        "predicted_sql": "select name from country where continent != 'Europe' and surfacearea > (select max(surfacearea) from country where continent = 'Europe')",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "gold_sql": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
        "predicted_sql": "select name from country where continent = 'Africa' and population < (select min(population) from country where continent = 'Asia')",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "gold_sql": "SELECT Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
        "predicted_sql": "select name from country where continent = 'Africa' and population < (select min(population) from country where continent = 'Asia')",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "gold_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
        "predicted_sql": "select name from country where continent = 'Asia' and population > (select max(population) from country where continent = 'Africa')",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "gold_sql": "SELECT Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
        "predicted_sql": "select name from country where continent = \"Asia\" and population > (select max(population) from country where continent = \"Africa\")",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?",
        "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "predicted_sql": "select countrycode from countrylanguage where language != \"English\"",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English.",
        "gold_sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "predicted_sql": "select countrycode from countrylanguage where language != \"English\"",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes of countries where people use languages other than English?",
        "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "predicted_sql": "select countrycode from countrylanguage where language != \"English\"",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "gold_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "predicted_sql": "select countrycode from countrylanguage where language != \"English\"",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "predicted_sql": "select code from country where governmentform != \"Republic\" and code not in (select countrycode from countrylanguage where language = \"English\")",
        "prompt_len": 867
    },
    {
        "db_id": "world_1",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "gold_sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
        "predicted_sql": "select code from country where governmentform != \"Republic\" and code not in (select countrycode from countrylanguage where language = \"English\")",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?",
        "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
        "predicted_sql": "select name from city where countrycode in (select countrycode from country where continent = 'Europe' and code not in (select countrycode from countrylanguage where language = 'English' and isofficial = 'T'))",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "gold_sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
        "predicted_sql": "select name from city where id in (select capital from country where continent = \"Europe\" and code not in (select countrycode from countrylanguage where language = \"English\" and isofficial = \"T\"))",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "gold_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
        "predicted_sql": "select distinct city.name from city, country, countrylanguage where city.countrycode = country.code and country.code = countrylanguage.countrycode and country.continent = \"Asia\" and countrylanguage.language = \"Chinese\" and countrylanguage.isofficial = \"T\"",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "gold_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
        "predicted_sql": "select name from city where district in (select region from country where continent = 'Asia') and id in (select capital from country where code in (select countrycode from countrylanguage where language = 'Chinese' and isofficial = 'T'))",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "gold_sql": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
        "predicted_sql": "select name, indepyear, surfacearea from country where population = (select min(population) from country)",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "gold_sql": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
        "predicted_sql": "select name, indepyear, surfacearea from country where population = (select min(population) from country)",
        "prompt_len": 867
    },
    {
        "db_id": "world_1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "gold_sql": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "predicted_sql": "select name, headofstate, population from country where surfacearea = (select max(surfacearea) from country)",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "gold_sql": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "predicted_sql": "select name, population, headofstate from country where surfacearea = (select max(surfacearea) from country)",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "gold_sql": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
        "predicted_sql": "select name, count(*) as num_languages from country join countrylanguage on country.code = countrylanguage.countrycode group by country.code having count(*) >= 3",
        "prompt_len": 867
    },
    {
        "db_id": "world_1",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "gold_sql": "SELECT COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
        "predicted_sql": "select name, count(*) as num_languages from country join countrylanguage on country.code = countrylanguage.countrycode group by country.code having num_languages > 2",
        "prompt_len": 869
    },
    {
        "db_id": "world_1",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "gold_sql": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
        "predicted_sql": "select district, count(*) from city where population > (select avg(population) from city) group by district",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "gold_sql": "SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
        "predicted_sql": "select district, count(*) from city where population > (select avg(population) from city) group by district",
        "prompt_len": 866
    },
    {
        "db_id": "world_1",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "gold_sql": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
        "predicted_sql": "select governmentform, sum(population) from country where lifeexpectancy > 72 group by governmentform",
        "prompt_len": 868
    },
    {
        "db_id": "world_1",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "gold_sql": "SELECT sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
        "predicted_sql": "select governmentform, sum(population) from country where lifeexpectancy > 72 group by governmentform",
        "prompt_len": 874
    },
    {
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "gold_sql": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "predicted_sql": "select continent, avg(lifeexpectancy), sum(population) from country where lifeexpectancy < 72 group by continent",
        "prompt_len": 868
    },
    {
        "db_id": "world_1",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "gold_sql": "SELECT sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
        "predicted_sql": "select continent, sum(population), avg(lifeexpectancy) from country where lifeexpectancy < 72 group by continent",
        "prompt_len": 877
    },
    {
        "db_id": "world_1",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "gold_sql": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "predicted_sql": "select name, surfacearea from country order by surfacearea desc limit 5",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "gold_sql": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "predicted_sql": "select name, surfacearea from country order by surfacearea desc limit 5",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "What are names of countries with the top 3 largest population?",
        "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "predicted_sql": "select name from country order by population desc limit 3",
        "prompt_len": 859
    },
    {
        "db_id": "world_1",
        "question": "Return the names of the 3 most populated countries.",
        "gold_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "predicted_sql": "select name from country order by population desc limit 3",
        "prompt_len": 857
    },
    {
        "db_id": "world_1",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "predicted_sql": "select name from country where population in (select population from country order by population limit 3)",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "Return the names of the 3 countries with the fewest people.",
        "gold_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "predicted_sql": "select name from country order by population asc limit 3",
        "prompt_len": 860
    },
    {
        "db_id": "world_1",
        "question": "how many countries are in Asia?",
        "gold_sql": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
        "predicted_sql": "select count(*) from country where continent = 'Asia'",
        "prompt_len": 854
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries in Asia.",
        "gold_sql": "SELECT count(*) FROM country WHERE continent = \"Asia\"",
        "predicted_sql": "select count(*) from country where continent = 'Asia'",
        "prompt_len": 855
    },
    {
        "db_id": "world_1",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "gold_sql": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
        "predicted_sql": "select name from country where continent = 'Europe' and population = 80000",
        "prompt_len": 869
    },
    {
        "db_id": "world_1",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "gold_sql": "SELECT Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
        "predicted_sql": "select name from country where continent = \"Europe\" and population = 80000",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "gold_sql": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
        "predicted_sql": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "prompt_len": 870
    },
    {
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "gold_sql": "select sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
        "predicted_sql": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "prompt_len": 870
    },
    {
        "db_id": "world_1",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "gold_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "predicted_sql": "select name from city where population between 160000 and 900000",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "gold_sql": "select name from city where population between 160000 and 900000",
        "predicted_sql": "select name from city where population between 160000 and 900000",
        "prompt_len": 863
    },
    {
        "db_id": "world_1",
        "question": "Which language is spoken by the largest number of countries?",
        "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "Give the language that is spoken in the most countries.",
        "gold_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "prompt_len": 858
    },
    {
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "gold_sql": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "predicted_sql": "select countrycode, language, percentage from countrylanguage where percentage = (select max(percentage) from countrylanguage group by countrycode)",
        "prompt_len": 862
    },
    {
        "db_id": "world_1",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "gold_sql": "SELECT LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "predicted_sql": "select countrycode, language from countrylanguage where percentage = (select max(percentage) from countrylanguage)",
        "prompt_len": 872
    },
    {
        "db_id": "world_1",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "gold_sql": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
        "predicted_sql": "select count(*) from countrylanguage where language = 'Spanish' and percentage = (select max(percentage) from countrylanguage where language = 'Spanish')",
        "prompt_len": 865
    },
    {
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "gold_sql": "SELECT count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
        "predicted_sql": "select count(*) from countrylanguage where language = 'Spanish'",
        "prompt_len": 861
    },
    {
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "gold_sql": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
        "predicted_sql": "select countrycode from countrylanguage where language = 'Spanish' order by percentage desc limit 1",
        "prompt_len": 864
    },
    {
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "gold_sql": "SELECT CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
        "predicted_sql": "select countrycode from countrylanguage where language = 'Spanish' and percentage > 50",
        "prompt_len": 861
    },
    {
        "db_id": "orchestra",
        "question": "How many conductors are there?",
        "gold_sql": "SELECT count(*) FROM conductor",
        "predicted_sql": "select count(*) from conductor",
        "prompt_len": 711
    },
    {
        "db_id": "orchestra",
        "question": "Count the number of conductors.",
        "gold_sql": "SELECT count(*) FROM conductor",
        "predicted_sql": "select count(*) from conductor",
        "prompt_len": 711
    },
    {
        "db_id": "orchestra",
        "question": "List the names of conductors in ascending order of age.",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "predicted_sql": "select name, age from conductor order by age asc",
        "prompt_len": 716
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors, ordered by age?",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "predicted_sql": "select name from conductor order by age",
        "prompt_len": 716
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "predicted_sql": "select name from conductor where nationality != \"USA\"",
        "prompt_len": 719
    },
    {
        "db_id": "orchestra",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "gold_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "predicted_sql": "select name from conductor where nationality != \"USA\"",
        "prompt_len": 719
    },
    {
        "db_id": "orchestra",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "predicted_sql": "select record_company, year_of_founded from orchestra order by year_of_founded desc",
        "prompt_len": 723
    },
    {
        "db_id": "orchestra",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "gold_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "predicted_sql": "select record_company, year_of_founded from orchestra order by year_of_founded desc",
        "prompt_len": 723
    },
    {
        "db_id": "orchestra",
        "question": "What is the average attendance of shows?",
        "gold_sql": "SELECT avg(Attendance) FROM SHOW",
        "predicted_sql": "select avg(attendance) from show",
        "prompt_len": 712
    },
    {
        "db_id": "orchestra",
        "question": "Return the average attendance across all shows.",
        "gold_sql": "SELECT avg(Attendance) FROM SHOW",
        "predicted_sql": "select avg(attendance) from show",
        "prompt_len": 712
    },
    {
        "db_id": "orchestra",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "predicted_sql": "select max(share), min(share) from performance where type != \"Live final\"",
        "prompt_len": 721
    },
    {
        "db_id": "orchestra",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "gold_sql": "SELECT max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "predicted_sql": "select max(share), min(share) from performance where type != \"Live final\"",
        "prompt_len": 722
    },
    {
        "db_id": "orchestra",
        "question": "How many different nationalities do conductors have?",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "predicted_sql": "select count(distinct nationality) from conductor",
        "prompt_len": 714
    },
    {
        "db_id": "orchestra",
        "question": "Count the number of different nationalities of conductors.",
        "gold_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "predicted_sql": "select count(distinct nationality) from conductor",
        "prompt_len": 715
    },
    {
        "db_id": "orchestra",
        "question": "List names of conductors in descending order of years of work.",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "predicted_sql": "select name, year_of_work from conductor order by year_of_work desc",
        "prompt_len": 717
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "predicted_sql": "select name, year_of_work from conductor order by year_of_work desc",
        "prompt_len": 723
    },
    {
        "db_id": "orchestra",
        "question": "List the name of the conductor with the most years of work.",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "predicted_sql": "select name from conductor where year_of_work = (select max(year_of_work) from conductor)",
        "prompt_len": 717
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "gold_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "predicted_sql": "select name from conductor where year_of_work = (select max(year_of_work) from conductor)",
        "prompt_len": 720
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "gold_sql": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "predicted_sql": "select conductor.name, orchestra.orchestra from conductor, orchestra where conductor.conductor_id = orchestra.conductor_id",
        "prompt_len": 718
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "gold_sql": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "predicted_sql": "select conductor.name, orchestra.orchestra from conductor, orchestra where conductor.conductor_id = orchestra.conductor_id",
        "prompt_len": 725
    },
    {
        "db_id": "orchestra",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
        "predicted_sql": "select name from conductor where conductor_id in (select conductor_id from orchestra group by conductor_id having count(*) > 1)",
        "prompt_len": 719
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
        "predicted_sql": "select name from conductor where conductor_id in (select conductor_id from orchestra group by conductor_id having count(*) > 1)",
        "prompt_len": 720
    },
    {
        "db_id": "orchestra",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count(orchestra.orchestra_id) desc limit 1",
        "prompt_len": 720
    },
    {
        "db_id": "orchestra",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count(orchestra.orchestra_id) desc limit 1",
        "prompt_len": 719
    },
    {
        "db_id": "orchestra",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
        "predicted_sql": "select name from conductor where conductor_id in (select conductor_id from orchestra where year_of_founded > 2008)",
        "prompt_len": 720
    },
    {
        "db_id": "orchestra",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "gold_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
        "predicted_sql": "select name from conductor, orchestra where conductor.conductor_id = orchestra.conductor_id and orchestra.year_of_founded > 2008",
        "prompt_len": 722
    },
    {
        "db_id": "orchestra",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "gold_sql": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "predicted_sql": "select record_company, count(*) from orchestra group by record_company",
        "prompt_len": 718
    },
    {
        "db_id": "orchestra",
        "question": "How many orchestras does each record company manage?",
        "gold_sql": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "predicted_sql": "select record_company, count(*) from orchestra group by record_company",
        "prompt_len": 714
    },
    {
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "predicted_sql": "select major_record_format, count(major_record_format) as count from orchestra group by major_record_format order by count asc",
        "prompt_len": 718
    },
    {
        "db_id": "orchestra",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "gold_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "predicted_sql": "select major_record_format, count(major_record_format) as frequency from orchestra group by major_record_format order by frequency desc",
        "prompt_len": 719
    },
    {
        "db_id": "orchestra",
        "question": "List the record company shared by the most number of orchestras.",
        "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select record_company, count(*) as count from orchestra group by record_company order by count desc limit 1",
        "prompt_len": 717
    },
    {
        "db_id": "orchestra",
        "question": "What is the record company used by the greatest number of orchestras?",
        "gold_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select record_company, count(*) as count from orchestra group by record_company order by count desc limit 1",
        "prompt_len": 718
    },
    {
        "db_id": "orchestra",
        "question": "List the names of orchestras that have no performance.",
        "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "predicted_sql": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "prompt_len": 715
    },
    {
        "db_id": "orchestra",
        "question": "What are the orchestras that do not have any performances?",
        "gold_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "predicted_sql": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "prompt_len": 716
    },
    {
        "db_id": "orchestra",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "predicted_sql": "select record_company from orchestra where year_of_founded < 2003 or year_of_founded > 2003",
        "prompt_len": 719
    },
    {
        "db_id": "orchestra",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "gold_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
        "predicted_sql": "select record_company from orchestra where year_of_founded < 2003 or year_of_founded > 2003",
        "prompt_len": 725
    },
    {
        "db_id": "orchestra",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "predicted_sql": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "prompt_len": 721
    },
    {
        "db_id": "orchestra",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "gold_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "predicted_sql": "select count(*) from orchestra where major_record_format = \"CD\" or major_record_format = \"DVD\"",
        "prompt_len": 720
    },
    {
        "db_id": "orchestra",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
        "predicted_sql": "select year_of_founded from orchestra where orchestra_id in ( select orchestra_id from performance group by orchestra_id having count(*) > 1 )",
        "prompt_len": 721
    },
    {
        "db_id": "orchestra",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "gold_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
        "predicted_sql": "select year_of_founded from orchestra where orchestra_id in (select orchestra_id from performance group by orchestra_id having count(*) > 1)",
        "prompt_len": 721
    },
    {
        "db_id": "network_1",
        "question": "How many high schoolers are there?",
        "gold_sql": "SELECT count(*) FROM Highschooler",
        "predicted_sql": "select count(*) from highschooler",
        "prompt_len": 324
    },
    {
        "db_id": "network_1",
        "question": "Count the number of high schoolers.",
        "gold_sql": "SELECT count(*) FROM Highschooler",
        "predicted_sql": "select count(*) from highschooler",
        "prompt_len": 324
    },
    {
        "db_id": "network_1",
        "question": "Show the names and grades of each high schooler.",
        "gold_sql": "SELECT name , grade FROM Highschooler",
        "predicted_sql": "select name, grade from highschooler",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "What are the names and grades for each high schooler?",
        "gold_sql": "SELECT name , grade FROM Highschooler",
        "predicted_sql": "select name, grade from highschooler",
        "prompt_len": 328
    },
    {
        "db_id": "network_1",
        "question": "Show all the grades of the high schoolers.",
        "gold_sql": "SELECT grade FROM Highschooler",
        "predicted_sql": "select grade from highschooler",
        "prompt_len": 326
    },
    {
        "db_id": "network_1",
        "question": "What is the grade of each high schooler?",
        "gold_sql": "SELECT grade FROM Highschooler",
        "predicted_sql": "select name, grade from highschooler",
        "prompt_len": 326
    },
    {
        "db_id": "network_1",
        "question": "What grade is Kyle in?",
        "gold_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
        "predicted_sql": "select grade from highschooler where name = \"Kyle\"",
        "prompt_len": 322
    },
    {
        "db_id": "network_1",
        "question": "Return the grade for the high schooler named Kyle.",
        "gold_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\"",
        "predicted_sql": "select grade from highschooler where name = \"Kyle\"",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all high schoolers in grade 10.",
        "gold_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "predicted_sql": "select name from highschooler where grade = 10",
        "prompt_len": 328
    },
    {
        "db_id": "network_1",
        "question": "What are the names of all high schoolers in grade 10?",
        "gold_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "predicted_sql": "select name from highschooler where grade = 10",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "Show the ID of the high schooler named Kyle.",
        "gold_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "predicted_sql": "select id from highschooler where name = \"Kyle\"",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "What is Kyle's id?",
        "gold_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
        "predicted_sql": "select id from highschooler where name = \"Kyle\"",
        "prompt_len": 322
    },
    {
        "db_id": "network_1",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "predicted_sql": "select count(*) from highschooler where grade in (9,10)",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "gold_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "predicted_sql": "select count(*) from highschooler where grade in (9,10)",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "Show the number of high schoolers for each grade.",
        "gold_sql": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "predicted_sql": "select grade, count(*) from highschooler group by grade",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "How many high schoolers are in each grade?",
        "gold_sql": "SELECT grade , count(*) FROM Highschooler GROUP BY grade",
        "predicted_sql": "select grade, count(*) from highschooler group by grade",
        "prompt_len": 326
    },
    {
        "db_id": "network_1",
        "question": "Which grade has the most high schoolers?",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select grade, count(*) as num from highschooler group by grade order by num desc limit 1",
        "prompt_len": 325
    },
    {
        "db_id": "network_1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "Show me all grades that have at least 4 students.",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "predicted_sql": "select grade from highschooler group by grade having count(*) >= 4",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "Which grades have 4 or more high schoolers?",
        "gold_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "predicted_sql": "select grade from highschooler group by grade having count(*) >= 4",
        "prompt_len": 326
    },
    {
        "db_id": "network_1",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "gold_sql": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
        "predicted_sql": "select student_id, count(friend_id) as num_friends from friend group by student_id",
        "prompt_len": 328
    },
    {
        "db_id": "network_1",
        "question": "How many friends does each student have?",
        "gold_sql": "SELECT student_id , count(*) FROM Friend GROUP BY student_id",
        "predicted_sql": "select h.name, count(f.friend_id) as friends from highschooler h left join friend f on h.id = f.student_id group by h.name",
        "prompt_len": 324
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "gold_sql": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "predicted_sql": "select name, count(friend_id) as num_friends from highschooler join friend on highschooler.id = friend.student_id group by name",
        "prompt_len": 330
    },
    {
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "gold_sql": "SELECT T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "predicted_sql": "select h.name, count(f.friend_id) as num_friends from highschooler h left join friend f on h.id = f.student_id group by h.id",
        "prompt_len": 333
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from highschooler where id in ( select student_id from friend group by student_id order by count(*) desc limit 1 )",
        "prompt_len": 333
    },
    {
        "db_id": "network_1",
        "question": "Return the name of the high school student with the most friends.",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from highschooler where id in ( select student_id from friend group by student_id order by count(*) desc limit 1 )",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
        "predicted_sql": "select name from highschooler where id in ( select student_id from friend group by student_id having count(*) >= 3 )",
        "prompt_len": 330
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
        "predicted_sql": "select name from highschooler where id in ( select student_id from friend group by student_id having count(*) >= 3 )",
        "prompt_len": 331
    },
    {
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
        "predicted_sql": "select h.name from highschooler h, friend f where h.id = f.friend_id and f.student_id = (select id from highschooler where name = \"Kyle\")",
        "prompt_len": 330
    },
    {
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle.",
        "gold_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
        "predicted_sql": "select h.name from highschooler h, friend f where h.id = f.friend_id and f.student_id = (select id from highschooler where name = \"Kyle\")",
        "prompt_len": 328
    },
    {
        "db_id": "network_1",
        "question": "How many friends does the high school student Kyle have?",
        "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "predicted_sql": "select count(*) from friend where student_id = (select id from highschooler where name = \"Kyle\")",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "Count the number of friends Kyle has.",
        "gold_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "predicted_sql": "select count(*) from friend where student_id = (select id from highschooler where name = \"Kyle\")",
        "prompt_len": 324
    },
    {
        "db_id": "network_1",
        "question": "Show ids of all students who do not have any friends.",
        "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "predicted_sql": "select id from highschooler where id not in (select student_id from friend)",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "What are the ids of high school students who do not have friends?",
        "gold_sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "predicted_sql": "select id from highschooler where id not in (select student_id from friend)",
        "prompt_len": 331
    },
    {
        "db_id": "network_1",
        "question": "Show names of all high school students who do not have any friends.",
        "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
        "predicted_sql": "select name from highschooler where id not in (select student_id from friend)",
        "prompt_len": 330
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have no friends?",
        "gold_sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
        "predicted_sql": "select name from highschooler where id not in (select friend_id from friend)",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "predicted_sql": "select h.id from highschooler h where exists (select * from friend f where f.student_id = h.id) and exists (select * from likes l where l.student_id = h.id)",
        "prompt_len": 335
    },
    {
        "db_id": "network_1",
        "question": "What are the ids of students who both have friends and are liked?",
        "gold_sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "predicted_sql": "select h.id from highschooler h where exists (select * from friend f where f.student_id = h.id) and exists (select * from likes l where l.student_id = h.id)",
        "prompt_len": 331
    },
    {
        "db_id": "network_1",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
        "predicted_sql": "select name from highschooler where id in (select student_id from friend) and id in (select student_id from likes)",
        "prompt_len": 333
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
        "predicted_sql": "select h.name from highschooler h, friend f, likes l where h.id = f.student_id and h.id = l.student_id",
        "prompt_len": 332
    },
    {
        "db_id": "network_1",
        "question": "Count the number of likes for each student id.",
        "gold_sql": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
        "predicted_sql": "select student_id, count(liked_id) as likes from likes group by student_id",
        "prompt_len": 326
    },
    {
        "db_id": "network_1",
        "question": "How many likes correspond to each student id?",
        "gold_sql": "SELECT student_id , count(*) FROM Likes GROUP BY student_id",
        "predicted_sql": "select student_id, count(liked_id) as likes from likes group by student_id",
        "prompt_len": 325
    },
    {
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "gold_sql": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "predicted_sql": "select h.name, count(l.liked_id) as likes from highschooler h, likes l where h.id = l.student_id group by h.name",
        "prompt_len": 334
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "gold_sql": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "predicted_sql": "select h.name, count(l.liked_id) as likes from highschooler h join likes l on h.id = l.student_id group by h.name",
        "prompt_len": 336
    },
    {
        "db_id": "network_1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from highschooler where id in (select liked_id from likes group by liked_id order by count(*) desc limit 1)",
        "prompt_len": 333
    },
    {
        "db_id": "network_1",
        "question": "Give the name of the student with the most likes.",
        "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select name from highschooler where id in ( select liked_id from likes group by liked_id order by count(*) desc limit 1 )",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have at least 2 likes.",
        "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
        "predicted_sql": "select name from highschooler where id in (select student_id from likes group by student_id having count(*) >= 2)",
        "prompt_len": 328
    },
    {
        "db_id": "network_1",
        "question": "What are the names of students who have 2 or more likes?",
        "gold_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
        "predicted_sql": "select name from highschooler where id in ( select student_id from likes group by student_id having count(*) >= 2 )",
        "prompt_len": 329
    },
    {
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
        "predicted_sql": "select name from highschooler where grade > 5 and id in (select student_id from friend group by student_id having count(*) >= 2)",
        "prompt_len": 335
    },
    {
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "gold_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
        "predicted_sql": "select name from highschooler where grade > 5 and id in (select student_id from friend group by student_id having count(*) >= 2)",
        "prompt_len": 338
    },
    {
        "db_id": "network_1",
        "question": "How many likes does Kyle have?",
        "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "predicted_sql": "select count(*) from likes where student_id = (select id from highschooler where name = \"Kyle\")",
        "prompt_len": 323
    },
    {
        "db_id": "network_1",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "gold_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
        "predicted_sql": "select count(*) from likes where student_id in (select id from highschooler where name = \"Kyle\")",
        "prompt_len": 330
    },
    {
        "db_id": "network_1",
        "question": "Find the average grade of all students who have some friends.",
        "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "predicted_sql": "select avg(grade) from highschooler where id in (select student_id from friend)",
        "prompt_len": 328
    },
    {
        "db_id": "network_1",
        "question": "What is the average grade of students who have friends?",
        "gold_sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "predicted_sql": "select avg(grade) from highschooler where id in (select student_id from friend)",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "Find the minimum grade of students who have no friends.",
        "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "predicted_sql": "select min(grade) from highschooler where id not in (select student_id from friend)",
        "prompt_len": 327
    },
    {
        "db_id": "network_1",
        "question": "What is the lowest grade of students who do not have any friends?",
        "gold_sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
        "predicted_sql": "select min(grade) from highschooler where id not in (select student_id from friend)",
        "prompt_len": 330
    },
    {
        "db_id": "dog_kennels",
        "question": "Which states have both owners and professionals living there?",
        "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "predicted_sql": "select distinct state from owners intersect select distinct state from professionals",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the states where both owners and professionals live.",
        "gold_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "predicted_sql": "select distinct state from owners intersect select distinct state from professionals",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "predicted_sql": "select avg(age) from dogs where dog_id in (select dog_id from treatments)",
        "prompt_len": 1891
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments.",
        "gold_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "predicted_sql": "select avg(age) from dogs",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "gold_sql": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
        "predicted_sql": "select professional_id, last_name, cell_number from professionals where state = 'Indiana' or treatment_id > 2",
        "prompt_len": 1906
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "gold_sql": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
        "predicted_sql": "select professional_id, last_name, cell_number from professionals where state = 'Indiana' or professional_id in (select professional_id from treatments group by professional_id having count(*) > 2)",
        "prompt_len": 1903
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "predicted_sql": "select name from dogs where dog_id not in (select dog_id from treatments where cost_of_treatment > 1000)",
        "prompt_len": 1894
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "gold_sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
        "predicted_sql": "select name from dogs where dog_id not in (select dog_id from treatments where cost_of_treatment > 1000)",
        "prompt_len": 1896
    },
    {
        "db_id": "dog_kennels",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "predicted_sql": "select first_name from owners union select first_name from professionals except select name from dogs",
        "prompt_len": 1893
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "gold_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "predicted_sql": "select first_name from owners where first_name not in (select name from dogs) union select first_name from professionals where first_name not in (select name from dogs)",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "gold_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "predicted_sql": "select professional_id, role_code, email_address from professionals where professional_id not in (select professional_id from treatments)",
        "prompt_len": 1896
    },
    {
        "db_id": "dog_kennels",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "gold_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "predicted_sql": "select professional_id, role_code, email_address from professionals where professional_id not in (select professional_id from treatments)",
        "prompt_len": 1896
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "gold_sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select owner_id, first_name, last_name from owners where owner_id in (select owner_id from dogs group by owner_id order by count(*) desc limit 1)",
        "prompt_len": 1894
    },
    {
        "db_id": "dog_kennels",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "gold_sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select owner_id, first_name, last_name from owners where owner_id in (select owner_id from dogs group by owner_id order by count(*) desc limit 1)",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "gold_sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "predicted_sql": "select professional_id, role_code, first_name from professionals where professional_id in (select professional_id from treatments group by professional_id having count(*) >= 2)",
        "prompt_len": 1897
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "gold_sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "predicted_sql": "select professional_id, role_code, first_name from professionals where professional_id in (select professional_id from treatments group by professional_id having count(*) >= 2)",
        "prompt_len": 1897
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the name of the breed with the most dogs?",
        "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select breed_name from breeds where breed_code = (select breed_code from dogs group by breed_code order by count(*) desc limit 1)",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "gold_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select breed_name from breeds where breed_code = (select breed_code from dogs group by breed_code order by count(*) desc limit 1)",
        "prompt_len": 1890
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "gold_sql": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select owner_id, last_name from owners where owner_id in (select owner_id from dogs where dog_id in (select dog_id from treatments))",
        "prompt_len": 1898
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "gold_sql": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "predicted_sql": "select owner_id, last_name from owners where owner_id in (select owner_id from dogs where dog_id in (select dog_id from treatments group by dog_id order by sum(cost_of_treatment) desc limit 1))",
        "prompt_len": 1899
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "predicted_sql": "select treatment_type_description from treatment_types where treatment_type_code = (select treatment_type_code from treatments where cost_of_treatment = (select min(cost_of_treatment) from treatments))",
        "prompt_len": 1892
    },
    {
        "db_id": "dog_kennels",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "gold_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "predicted_sql": "select treatment_type_description from treatment_types where treatment_type_code = (select treatment_type_code from treatments where cost_of_treatment = (select min(cost_of_treatment) from treatments))",
        "prompt_len": 1891
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "gold_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "predicted_sql": "select owner_id, zip_code from owners where owner_id in (select owner_id from dogs where dog_id in (select dog_id from treatments where treatment_id in (select treatment_id from treatments group by treatment_id order by sum(cost_of_treatment) desc limit 1)))",
        "prompt_len": 1899
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "gold_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "predicted_sql": "select owner_id, zip_code from owners where owner_id in (select owner_id from dogs where dog_id in (select dog_id from treatments where treatment_id in (select treatment_id from treatments group by treatment_id order by sum(cost_of_treatment) desc limit 1)))",
        "prompt_len": 1899
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "gold_sql": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "predicted_sql": "select professional_id, cell_number from professionals where professional_id in (select professional_id from treatments group by professional_id having count(distinct treatment_type_code) >= 2)",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "gold_sql": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
        "predicted_sql": "select professional_id, cell_number from professionals where professional_id in (select professional_id from treatments group by professional_id having count(distinct treatment_type_code) >= 2)",
        "prompt_len": 1894
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "gold_sql": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "predicted_sql": "select first_name, last_name from professionals where professional_id in (select professional_id from treatments where cost_of_treatment < (select avg(cost_of_treatment) from treatments))",
        "prompt_len": 1896
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "gold_sql": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "predicted_sql": "select first_name, last_name from professionals where professional_id in (select professional_id from treatments where cost_of_treatment < (select avg(cost_of_treatment) from treatments))",
        "prompt_len": 1898
    },
    {
        "db_id": "dog_kennels",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "gold_sql": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
        "predicted_sql": "select date_of_treatment, first_name from treatments, professionals where treatments.professional_id = professionals.professional_id",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "gold_sql": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
        "predicted_sql": "select date_of_treatment, first_name from treatments, professionals where treatments.professional_id = professionals.professional_id",
        "prompt_len": 1891
    },
    {
        "db_id": "dog_kennels",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "gold_sql": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "predicted_sql": "select cost_of_treatment, treatment_type_description from treatments, treatment_types where treatments.treatment_type_code = treatment_types.treatment_type_code",
        "prompt_len": 1889
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the cost and treatment type description of each treatment?",
        "gold_sql": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "predicted_sql": "select cost_of_treatment, treatment_type_description from treatments, treatment_types where treatments.treatment_type_code = treatment_types.treatment_type_code",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "gold_sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "predicted_sql": "select first_name, last_name, size_description from owners, dogs, sizes where owners.owner_id = dogs.owner_id and dogs.size_code = sizes.size_code",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "gold_sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "predicted_sql": "select first_name, last_name, size_description from owners, dogs, sizes where owners.owner_id = dogs.owner_id and dogs.size_code = sizes.size_code",
        "prompt_len": 1894
    },
    {
        "db_id": "dog_kennels",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "gold_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "predicted_sql": "select first_name, name from owners, dogs where owners.owner_id = dogs.owner_id",
        "prompt_len": 1890
    },
    {
        "db_id": "dog_kennels",
        "question": "What are each owner's first name and their dogs's name?",
        "gold_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "predicted_sql": "select first_name, name from owners, dogs where owners.owner_id = dogs.owner_id",
        "prompt_len": 1889
    },
    {
        "db_id": "dog_kennels",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "gold_sql": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "predicted_sql": "select name, date_of_treatment from dogs, treatments where dogs.dog_id = treatments.dog_id and breed_code = (select breed_code from breeds group by breed_code having count(breed_code) = (select min(cnt) from (select count(breed_code) as cnt from breeds group by breed_code)))",
        "prompt_len": 1894
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "gold_sql": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "predicted_sql": "select name, date_of_treatment from dogs, treatments where dogs.dog_id = treatments.dog_id",
        "prompt_len": 1892
    },
    {
        "db_id": "dog_kennels",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "gold_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
        "predicted_sql": "select first_name, name from owners, dogs where owners.owner_id = dogs.owner_id and state = 'Virginia'",
        "prompt_len": 1899
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "gold_sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
        "predicted_sql": "select first_name, name from owners, dogs where owners.owner_id = dogs.owner_id and state = 'Virginia'",
        "prompt_len": 1893
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "gold_sql": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "predicted_sql": "select dogs.date_arrived, dogs.date_departed from dogs inner join treatments on dogs.dog_id = treatments.dog_id",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "gold_sql": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "predicted_sql": "select dogs.date_arrived, dogs.date_departed from dogs inner join treatments on dogs.dog_id = treatments.dog_id",
        "prompt_len": 1892
    },
    {
        "db_id": "dog_kennels",
        "question": "List the last name of the owner owning the youngest dog.",
        "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
        "predicted_sql": "select last_name from owners where owner_id = (select owner_id from dogs where date_of_birth = (select min(date_of_birth) from dogs))",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "gold_sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
        "predicted_sql": "select last_name from owners where owner_id = (select owner_id from dogs where date_of_birth = (select min(date_of_birth) from dogs))",
        "prompt_len": 1890
    },
    {
        "db_id": "dog_kennels",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "gold_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "predicted_sql": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "gold_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "predicted_sql": "select email_address from professionals where state = 'Hawaii' or state = 'Wisconsin'",
        "prompt_len": 1896
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "gold_sql": "SELECT date_arrived , date_departed FROM Dogs",
        "predicted_sql": "select date_arrived, date_departed from dogs",
        "prompt_len": 1890
    },
    {
        "db_id": "dog_kennels",
        "question": "List the arrival date and the departure date for all the dogs.",
        "gold_sql": "SELECT date_arrived , date_departed FROM Dogs",
        "predicted_sql": "select date_arrived, date_departed from dogs",
        "prompt_len": 1889
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs went through any treatments?",
        "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "predicted_sql": "select count(*) from treatments",
        "prompt_len": 1884
    },
    {
        "db_id": "dog_kennels",
        "question": "Count the number of dogs that went through a treatment.",
        "gold_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "predicted_sql": "select count(*) from treatments",
        "prompt_len": 1887
    },
    {
        "db_id": "dog_kennels",
        "question": "How many professionals have performed any treatment to dogs?",
        "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "predicted_sql": "select count(distinct professional_id) from treatments",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have ever treated dogs.",
        "gold_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "predicted_sql": "select count(distinct professional_id) from treatments",
        "prompt_len": 1887
    },
    {
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "gold_sql": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "predicted_sql": "select role_code, street, city, state from professionals where city like '%West%'",
        "prompt_len": 1901
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "gold_sql": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "predicted_sql": "select role_code, street, city, state from professionals where city like '%West%'",
        "prompt_len": 1900
    },
    {
        "db_id": "dog_kennels",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "gold_sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "predicted_sql": "select first_name, last_name, email_address from owners where state like '%North%'",
        "prompt_len": 1901
    },
    {
        "db_id": "dog_kennels",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "gold_sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "predicted_sql": "select first_name, last_name, email_address from owners where state like '%North%'",
        "prompt_len": 1901
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs have an age below the average?",
        "gold_sql": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
        "predicted_sql": "select count(*) from dogs where age < (select avg(age) from dogs)",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "Count the number of dogs of an age below the average.",
        "gold_sql": "SELECT count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
        "predicted_sql": "select count(*) from dogs where age < (select avg(age) from dogs)",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most recent treatment cost?",
        "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "predicted_sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "prompt_len": 1885
    },
    {
        "db_id": "dog_kennels",
        "question": "Show me the cost of the most recently performed treatment.",
        "gold_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "predicted_sql": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "prompt_len": 1887
    },
    {
        "db_id": "dog_kennels",
        "question": "How many dogs have not gone through any treatment?",
        "gold_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "predicted_sql": "select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "gold_sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "predicted_sql": "select count(*) from dogs where dog_id not in (select dog_id from treatments)",
        "prompt_len": 1889
    },
    {
        "db_id": "dog_kennels",
        "question": "How many owners temporarily do not have any dogs?",
        "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "predicted_sql": "select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "gold_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "predicted_sql": "select count(*) from owners where owner_id not in (select owner_id from dogs)",
        "prompt_len": 1891
    },
    {
        "db_id": "dog_kennels",
        "question": "How many professionals did not operate any treatment on dogs?",
        "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "predicted_sql": "select count(*) from professionals where professional_id not in (select professional_id from treatments)",
        "prompt_len": 1887
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the number of professionals who have not treated any dogs.",
        "gold_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "predicted_sql": "select count(*) from professionals where professional_id not in (select professional_id from treatments)",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "gold_sql": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
        "predicted_sql": "select name, age, weight from dogs where abandoned_yn = 1",
        "prompt_len": 1903
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "gold_sql": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
        "predicted_sql": "select name, age, weight from dogs where abandoned_yn = 1",
        "prompt_len": 1908
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the average age of all the dogs?",
        "gold_sql": "SELECT avg(age) FROM Dogs",
        "predicted_sql": "select avg(age) from dogs",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "Compute the average age of all the dogs.",
        "gold_sql": "SELECT avg(age) FROM Dogs",
        "predicted_sql": "select avg(age) from dogs",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?",
        "gold_sql": "SELECT max(age) FROM Dogs",
        "predicted_sql": "select max(age) from dogs",
        "prompt_len": 1885
    },
    {
        "db_id": "dog_kennels",
        "question": "Tell me the age of the oldest dog.",
        "gold_sql": "SELECT max(age) FROM Dogs",
        "predicted_sql": "select max(age) from dogs",
        "prompt_len": 1885
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "gold_sql": "SELECT charge_type , charge_amount FROM Charges",
        "predicted_sql": "select charge_type, charge_amount from charges",
        "prompt_len": 1891
    },
    {
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount.",
        "gold_sql": "SELECT charge_type , charge_amount FROM Charges",
        "predicted_sql": "select charge_type, charge_amount from charges",
        "prompt_len": 1884
    },
    {
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?",
        "gold_sql": "SELECT max(charge_amount) FROM Charges",
        "predicted_sql": "select charge_amount from charges order by charge_amount desc limit 1",
        "prompt_len": 1886
    },
    {
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?",
        "gold_sql": "SELECT max(charge_amount) FROM Charges",
        "predicted_sql": "select charge_amount from charges order by charge_amount desc limit 1",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "gold_sql": "SELECT email_address , cell_number , home_phone FROM professionals",
        "predicted_sql": "select email_address, cell_number, home_phone from professionals",
        "prompt_len": 1890
    },
    {
        "db_id": "dog_kennels",
        "question": "What are the email, cell phone and home phone of each professional?",
        "gold_sql": "SELECT email_address , cell_number , home_phone FROM professionals",
        "predicted_sql": "select email_address, home_phone, cell_number from professionals",
        "prompt_len": 1890
    },
    {
        "db_id": "dog_kennels",
        "question": "What are all the possible breed type and size type combinations?",
        "gold_sql": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "predicted_sql": "select b.breed_name, s.size_description from breeds b, sizes s where b.breed_code = s.size_code",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "gold_sql": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "predicted_sql": "select distinct breed_code, size_code from dogs",
        "prompt_len": 1888
    },
    {
        "db_id": "dog_kennels",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "gold_sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "predicted_sql": "select first_name, treatment_type_description from professionals, treatments, treatment_types where professionals.professional_id = treatments.professional_id and treatments.treatment_type_code = treatment_types.treatment_type_code",
        "prompt_len": 1895
    },
    {
        "db_id": "dog_kennels",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "gold_sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "predicted_sql": "select first_name, treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code",
        "prompt_len": 1892
    },
    {
        "db_id": "singer",
        "question": "How many singers are there?",
        "gold_sql": "SELECT count(*) FROM singer",
        "predicted_sql": "select count(*) from singer",
        "prompt_len": 342
    },
    {
        "db_id": "singer",
        "question": "What is the count of singers?",
        "gold_sql": "SELECT count(*) FROM singer",
        "predicted_sql": "select count(*) from singer",
        "prompt_len": 343
    },
    {
        "db_id": "singer",
        "question": "List the name of singers in ascending order of net worth.",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "predicted_sql": "select name from singer order by net_worth_millions asc",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "What are the names of singers ordered by ascending net worth?",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "predicted_sql": "select name from singer order by net_worth_millions asc",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "What are the birth year and citizenship of singers?",
        "gold_sql": "SELECT Birth_Year , Citizenship FROM singer",
        "predicted_sql": "select birth_year, citizenship from singer",
        "prompt_len": 346
    },
    {
        "db_id": "singer",
        "question": "What are the birth years and citizenships of the singers?",
        "gold_sql": "SELECT Birth_Year , Citizenship FROM singer",
        "predicted_sql": "select birth_year, citizenship from singer",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "predicted_sql": "select name from singer where citizenship != \"France\"",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers who are not French citizens?",
        "gold_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "predicted_sql": "select name from singer where citizenship != 'France'",
        "prompt_len": 349
    },
    {
        "db_id": "singer",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "gold_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "predicted_sql": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "prompt_len": 350
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "gold_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "predicted_sql": "select name from singer where birth_year = 1948 or birth_year = 1949",
        "prompt_len": 352
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer with the largest net worth?",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "predicted_sql": "select name from singer where net_worth_millions = (select max(net_worth_millions) from singer)",
        "prompt_len": 349
    },
    {
        "db_id": "singer",
        "question": "What is the name of the singer who is worth the most?",
        "gold_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "predicted_sql": "select name from singer where net_worth_millions = (select max(net_worth_millions) from singer)",
        "prompt_len": 349
    },
    {
        "db_id": "singer",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "gold_sql": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "predicted_sql": "select citizenship, count(*) from singer group by citizenship",
        "prompt_len": 350
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, how many singers are from that country?",
        "gold_sql": "SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
        "predicted_sql": "select citizenship, count(*) from singer group by citizenship",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "Please show the most common citizenship of singers.",
        "gold_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "predicted_sql": "select citizenship, count(*) as count from singer group by citizenship order by count desc limit 1",
        "prompt_len": 345
    },
    {
        "db_id": "singer",
        "question": "What is the most common singer citizenship ?",
        "gold_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "predicted_sql": "select citizenship, count(*) as count from singer group by citizenship order by count desc limit 1",
        "prompt_len": 344
    },
    {
        "db_id": "singer",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "gold_sql": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "predicted_sql": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "prompt_len": 351
    },
    {
        "db_id": "singer",
        "question": "For each citizenship, what is the maximum net worth?",
        "gold_sql": "SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "predicted_sql": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "prompt_len": 347
    },
    {
        "db_id": "singer",
        "question": "Show titles of songs and names of singers.",
        "gold_sql": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "predicted_sql": "select title, name from song, singer where song.singer_id = singer.singer_id",
        "prompt_len": 345
    },
    {
        "db_id": "singer",
        "question": "What are the song titles and singer names?",
        "gold_sql": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "predicted_sql": "select title, name from song join singer on song.singer_id = singer.singer_id",
        "prompt_len": 345
    },
    {
        "db_id": "singer",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "predicted_sql": "select distinct name from singer where singer_id in (select singer_id from song where sales > 300000)",
        "prompt_len": 351
    },
    {
        "db_id": "singer",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "gold_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
        "predicted_sql": "select name from singer where singer_id in (select singer_id from song where sales > 300000)",
        "prompt_len": 352
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song.",
        "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "predicted_sql": "select name from singer where singer_id in (select singer_id from song group by singer_id having count(*) > 1)",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?",
        "gold_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "predicted_sql": "select name from singer where singer_id in (select singer_id from song group by singer_id having count(*) > 1)",
        "prompt_len": 350
    },
    {
        "db_id": "singer",
        "question": "Show the names of singers and the total sales of their songs.",
        "gold_sql": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "predicted_sql": "select name, sum(sales) from singer join song on singer.singer_id = song.singer_id group by name",
        "prompt_len": 349
    },
    {
        "db_id": "singer",
        "question": "For each singer name, what is the total sales for their songs?",
        "gold_sql": "SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "predicted_sql": "select name, sum(sales) from singer join song on singer.singer_id = song.singer_id group by name",
        "prompt_len": 350
    },
    {
        "db_id": "singer",
        "question": "List the name of singers that do not have any song.",
        "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "predicted_sql": "select name from singer where singer_id not in (select singer_id from song)",
        "prompt_len": 348
    },
    {
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?",
        "gold_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "predicted_sql": "select name from singer where singer_id not in (select singer_id from song)",
        "prompt_len": 351
    },
    {
        "db_id": "singer",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "predicted_sql": "select citizenship from singer where birth_year < 1945 or birth_year > 1955",
        "prompt_len": 351
    },
    {
        "db_id": "singer",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "gold_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "predicted_sql": "select citizenship from singer where birth_year < 1945 or birth_year > 1955",
        "prompt_len": 356
    },
    {
        "db_id": "real_estate_properties",
        "question": "How many available features are there in total?",
        "gold_sql": "SELECT count(*) FROM Other_Available_Features",
        "predicted_sql": "select count(*) from other_available_features",
        "prompt_len": 1355
    },
    {
        "db_id": "real_estate_properties",
        "question": "What is the feature type name of feature AirCon?",
        "gold_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
        "predicted_sql": "select feature_type_name from ref_feature_types where feature_type_code = (select feature_type_code from other_available_features where feature_name = 'AirCon')",
        "prompt_len": 1357
    },
    {
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "gold_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
        "predicted_sql": "select property_type_description from ref_property_types",
        "prompt_len": 1358
    },
    {
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "gold_sql": "SELECT property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
        "predicted_sql": "select property_name from properties where property_type_code in ('House', 'Apartment') and room_count > 1",
        "prompt_len": 1364
    }
]